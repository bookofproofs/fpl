/* THIS IS AN AUTOMATICALLY GENERATED FILE VIA THE rr_converter.py UTILITY */
/* IT CONTAINS THE CURRENT FPL GRAMMAR TO BE USED WITH THE Railroad Diagram Generator */


/* fpl Version 1.1.7 */
/* a mathematical theory written in FPL can be split between different files having */
/* Every theory part block starts with an optional syntax extension block, followed by */
/* optional usage of other libraries, followed by optional inference rules, */
/* followed by a an optional uses block of comma-separated FplTheoryNamespace statements, */
/* followed by a mandatory TheoryBlock, followed by an optional localization block */
    Namespace ::=
        ( CW )* NamespaceIdentifier
        ( CW )* NamespaceBlock
        ( CW )* 
    NamespaceBlock ::=
        LeftBrace
        ( CW )* (ExtensionBlock)?
        ( CW )* (UsesClause)?
        ( CW )* (RulesOfInferenceBlock)?
        ( CW )* TheoryBlock
        ( CW )* (LocalizationBlock)?
        ( CW )* RightBrace
    WildcardTheoryNamespaceList ::=
        WildcardTheoryNamespace ( (IW)? Comma (IW)? WildcardTheoryNamespace )*
    ExtensionBlock ::=
        ExtensionHeader SW ExtensionContent (IW)? ExtensionTail
    ExtensionHeader ::=
        Colon ext
    ExtensionContent ::=
regular_expression '/((?!:end).)*/'
    ExtensionTail ::=
        Colon end SW
    ext ::=
        "ext"
    end ::=
        "end"
    UsesClause ::=
        uses SW WildcardTheoryNamespaceList SW
/* A theory block is a sequence of statements */
    TheoryBlock ::=
        TheoryHeader
        ( CW )* LeftBrace
        ( CW )* (BuildingBlockList)?
        ( CW )* RightBrace
    RulesOfInferenceBlock ::=
        InferenceHeader
        ( CW )* LeftBrace
        ( CW )* RuleOfInferenceList
        ( CW )* RightBrace
    InferenceHeader ::=
        (
        inference
        | inf
        )
    inference ::=
        "inference"
    inf ::=
        "inf"
    PremiseHeader ::=
        (
        premise
        | pre
        )
    premise ::=
        "premise"
    pre ::=
        "pre"
    ConclusionHeader ::=
        (
        conclusion
        | con
        )
    conclusion ::=
        "conclusion"
    con ::=
        "con"
    RuleOfInferenceList ::=
        RuleOfInference ( ( CW )* RuleOfInference )*
/* To simplify the syntax definition, we do not define separate */
/* FplPremiseConclusionBlocks for rules of inference and theorem-like blocks. */
/* The first have a simplified, PL0 syntax, the latter have a more complex, predicate syntax. */
/* However, there is a syntactical simplification of the signature */
    RuleOfInference ::=
        Signature (IW)? PremiseConclusionBlock
    PremiseConclusionBlock ::=
        LeftBrace
        ( CW )* (VariableSpecificationList)?
        ( CW )* PremiseBlock
        ( CW )* ConclusionBlock
        ( CW )* RightBrace
    PremiseBlock ::=
        PremiseHeader (IW)? Colon ( CW )* Predicate SW
    ConclusionBlock ::=
        ConclusionHeader (IW)? Colon ( CW )* Predicate
    TheoryHeader ::=
        (
        theory
        | th
        )
    theory ::=
        "theory"
    th ::=
        "th"
    BuildingBlockList ::=
        BuildingBlock ( ( CW )* BuildingBlock )*
/* FPL statements can be definitions, axioms, Theorem-proof blocks and conjectures */
    BuildingBlock ::=
        (
        Definition
        | Axiom
        | TheoremLikeStatementOrConjecture
        | Proof
        )
    uses ::=
        "uses"
/* Definitions */
    Definition ::=
        (
        DefinitionClass
        | DefinitionPredicate
        | DefinitionFunctionalTerm
        )
/* Objects can only be defined with or without inheritance from a parent class cl */
    DefinitionClass ::=
        ClassSignature
        ( CW )* ObjectDefinitionBlock
    ClassSignature ::=
        ClassHeader
        SW PredicateIdentifier
        (IW)? Colon
        (IW)? Type
    ObjectDefinitionBlock ::=
        LeftBrace
        ( CW )* (VariableSpecificationList)?
        ( CW )* (DefinitionContentList)?
        ( CW )* RightBrace
    FunctionalTermDefinitionBlock ::=
        LeftBrace
        ( CW )* (VariableSpecificationList)?
        ( CW )* (PropertyList)?
        ( CW )* RightBrace
    DefinitionContentList ::=
        DefinitionContent ( ( CW )* DefinitionContent )*
    DefinitionContent ::=
        (
        Property
        | Constructor
        )
    DefinitionFunctionalTerm ::=
        FunctionalTermSignature
        ( CW )* FunctionalTermDefinitionBlock
    FunctionalTermSignature ::=
        FunctionalTermHeader
        SW Signature
        (IW)? Mapping
    Mapping ::=
        To
        (IW)? VariableType
    VariableSpecificationList ::=
        ( ( CW )* VariableSpecification SW )+
    VariableSpecification ::=
        (
        Statement
        | NamedVariableDeclaration
        )
/* not by a predicate (i.e. with possible arguments) */
/* the scope of a definition. An assertion uses a predicate referring to existing identifiers in the whole theory */
    AssertionStatement ::=
        assert SW Predicate
    assert ::=
        "assert"
    NamedVariableDeclaration ::=
        VariableList (IW)? Colon (IW)? VariableType
    VariableType ::=
        (
        ParenthesisedGeneralType
        | GeneralType
        | IndexHeader
        )
    GeneralType ::=
        (CallModifier)?
        (
        TypeWithCoord
        | Type
        )
    IndexHeader ::=
        (
        index
        | ind
        )
    index ::=
        "index"
    ind ::=
        "ind"
    Type ::=
        (
        PredicateIdentifier
        | XId
        | PredicateHeader
        | FunctionalTermHeader
        | ObjectHeader
        )
    VariableList ::=
        Variable ( (IW)? Comma (IW)? Variable )*
/* Predicates can be defined similarly to objects, but they are not derived from a parent type and have arguments */
    DefinitionPredicate ::=
        PredicateHeader
        SW Signature
        ( CW )* PredicateDefinitionBlock
    PredicateHeader ::=
        (
        predicate
        | pred
        )
    FunctionalTermHeader ::=
        (
        function
        | func
        )
    PredicateDefinitionBlock ::=
        LeftBrace
        ( CW )* (VariableSpecificationList)?
        ( CW )* (Predicate)?
        ( CW )* (PropertyList)?
        ( CW )* RightBrace
    PredicateInstanceBlock ::=
        LeftBrace
        ( CW )* (VariableSpecificationList)?
        ( CW )* (Predicate)?
        ( CW )* RightBrace
    PredicateIdentifier ::=
        (
        AliasedId
        | IdStartsWithCap
        )
    AliasedId ::=
        IdStartsWithCap ( Dot IdStartsWithCap )+
    ClassHeader ::=
        (
        class
        | cl
        )
    class ::=
        "class"
    cl ::=
        "cl"
    predicate ::=
        "predicate"
    pred ::=
        "pred"
    function ::=
        "function"
    func ::=
        "func"
    To ::=
        "->"
    ObjectHeader ::=
        (
        object
        | obj
        | LongTemplateHeader
        | TemplateHeader
        )
    LongTemplateHeader ::=
        TemplateHeader ( IdStartsWithCap | Digit )
    TemplateHeader ::=
        (
        template
        | tpl
        )
    object ::=
        "object"
    obj ::=
        "obj"
/* Via templates, FPL supports generic types, which make it possible to define abstract mathematical */
/* objects and their properties that defer the concrete */
/* specification of one or more types until the definition or method is declared and instantiated by */
/* client code */
    template ::=
        "template"
    tpl ::=
        "tpl"
/* Axioms */
    Axiom ::=
        AxiomHeader SW Signature
        ( CW )* AxiomBlock
    AxiomHeader ::=
        (
        axiom
        | ax
        | postulate
        | post
        )
    AxiomBlock ::=
        LeftBrace
        ( CW )* (VariableSpecificationList)?
        ( CW )* (Predicate)?
        ( CW )* RightBrace
    axiom ::=
        "axiom"
    ax ::=
        "ax"
    postulate ::=
        "postulate"
    post ::=
        "post"
/* Properties */
    PropertyList ::=
        ( Property )+
    Property ::=
        ( CW )* PropertyHeader
        SW DefinitionProperty
    DefinitionProperty ::=
        (
        PredicateInstance
        | FunctionalTermInstance
        | ClassInstance
        )
    ClassInstance ::=
        VariableType
        SW Signature
        ( CW )* InstanceBlock
    FunctionalTermInstance ::=
        FunctionalTermSignature
        ( CW )* InstanceBlock
    PredicateInstance ::=
        PredicateHeader
        SW Signature
        ( CW )* PredicateInstanceBlock
    PropertyHeader ::=
        (
        mandatory
        | mand
        | optional
        | opt
        )
    mandatory ::=
        "mandatory"
    mand ::=
        "mand"
    optional ::=
        "optional"
    opt ::=
        "opt"
/* Constructors */
    Constructor ::=
        Signature ( CW )*
        InstanceBlock
    InstanceBlock ::=
        LeftBrace
        ( CW )* (VariableSpecificationList)?
        ( CW )* RightBrace
    Signature ::=
        PredicateIdentifier
        (IW)? ParamTuple
    ParenthesisedGeneralType ::=
        GeneralType
        (IW)? ParamTuple
    ParamTuple ::=
        LeftParen
        (IW)? (NamedVariableDeclarationList)?
        (IW)? RightParen
    ArgumentParam ::=
        Slash ArgumentIdentifier
    NamedVariableDeclarationList ::=
        NamedVariableDeclaration ( (IW)? Comma (IW)? NamedVariableDeclaration )*
    TypeWithCoord ::=
        Type
        (IW)? LeftBound
        (IW)? ( RangeInType | CoordInType )
        (IW)? RightBound
    RangeInType ::=
        (CoordInType)?
        (IW)? Tilde
        (IW)? (CoordInType)?
    CoordInType ::=
        (
        PredicateWithArguments
        | IndexValue
        | Variable
        )
    EntityWithCoord ::=
        Entity
        LeftBracket
        (IW)? ( Range | CoordList )
        (IW)? RightBracket
    CoordList ::=
        Coord ( (IW)? Comma (IW)? Coord )*
    Entity ::=
        (
        Variable
        | AtList self
        | self
        )
    AtList ::=
        ( At )+
    Coord ::=
        (
        PrimePredicate
        | Assignee
        )
    Range ::=
        (Coord)?
        (IW)? Tilde
        (IW)? (Coord)?
    CallModifier ::=
        (
        Star
        | Plus
        )
    Plus ::=
        "+"
    ConditionFollowedByResultList ::=
        ConditionFollowedByResult ( ( CW )* ConditionFollowedByResult )*
    ConditionFollowedByResult ::=
        case
        SW Predicate
        (IW)? Colon
        ( CW )* StatementList
    At ::=
        "@"
/* Theorem-like statements */
/* A Theorem is a headed Signature, followed by a TheoremLikeBlock */
    TheoremLikeStatementOrConjecture ::=
        TheoremLikeStatementOrConjectureHeader SW (CorollarySignature | Signature)
        (IW)? PremiseConclusionBlock
    TheoremLikeStatementOrConjectureHeader ::=
        (
        theorem
        | thm
        | conjecture
        | conj
        | proposition
        | prop
        | lemma
        | lem
        | CorollaryHeader
        )
    CorollarySignature ::=
        ReferencingIdentifier
        (IW)? ParamTuple
    CorollaryHeader ::=
        (
        corollary
        | cor
        )
    theorem ::=
        "theorem"
    thm ::=
        "thm"
    proposition ::=
        "proposition"
    prop ::=
        "prop"
    lemma ::=
        "lemma"
    lem ::=
        "lem"
    corollary ::=
        "corollary"
    cor ::=
        "cor"
    conjecture ::=
        "conjecture"
    conj ::=
        "conj"
/* Proofs */
/* A Proof relates to the PredicateIdentifier of the Theorem. */
/* Because proofs are named, they can stand anywhere inside the theory, not only immediately */
/* after the Theorem they prove. This is to enable the users to mix */
/* with natural language an provide a proof long after the Theorem was stated. */
    Proof ::=
        ProofHeader SW ReferencingIdentifier (IW)? ProofBlock
    ReferencingIdentifier ::=
        PredicateIdentifier DollarDigitList
    DollarDigitList ::=
        Dollar Digit ( Dollar Digit )*
    ProofHeader ::=
        (
        proof
        | prf
        )
    ProofBlock ::=
        LeftBrace
        ( CW )* (VariableSpecificationList)?
        ( CW )* ProofArgumentList
        ( CW )* RightBrace
    ProofArgumentList ::=
        ProofArgument ( ( CW )* ProofArgument )*
    ProofArgument ::=
        ArgumentIdentifier Dot SW
        (Justification SW)?
        ArgumentInference SW
    VDash ::=
        "|-"
    AssumeHeader ::=
        (
        assume
        | ass
        )
    AssumedPredicate ::=
        AssumeHeader
        SW PremiseOrOtherPredicate
    DerivedPredicate ::=
        VDash SW
        (
        Predicate
        | qed
        | trivial
        )
    qed ::=
        "qed"
    trivial ::=
        "trivial"
    PremiseOrOtherPredicate ::=
        (
        PremiseHeader
        | Predicate
        )
    ArgumentInference ::=
        (
        AssumedPredicate
        | DerivedPredicate
        | Revoke
        )
    Revoke ::=
        RevokeHeader SW ArgumentParam
    RevokeHeader ::=
        (
        revoke
        | rev
        )
/* Referenced results can be the identifiers of Rules of References, conjectures, theorem-like statements, */
/* or axioms */
    Justification ::=
        Slash PrimePredicate ( (IW)? Comma (IW)? Slash PrimePredicate )*
    Slash ::=
        "/"
    proof ::=
        "proof"
    prf ::=
        "prf"
    assume ::=
        "assume"
    ass ::=
        "ass"
    revoke ::=
        "revoke"
    rev ::=
        "rev"
/* Boolean Keywords */
    true ::=
        "true"
    false ::=
        "false"
    not ::=
        "not"
    and ::=
        "and"
    or ::=
        "or"
    impl ::=
        "impl"
    iif ::=
        "iif"
    xor ::=
        "xor"
    is ::=
        "is"
/* Predicates */
    Predicate ::=
        (
        PrimePredicate
        | CompoundPredicate
        )
    PrimePredicate ::=
        (
        QualifiedIdentifier
        | PredicateWithArguments
        | Statement
        | IndexValue
        | Identifier
        | IsOperator
        | true
        | false
        | UndefinedHeader
        | ArgumentParam
        | extDigit
        )
    QualifiedIdentifier ::=
        Identifier ( Dot PredicateWithArguments )+
    PredicateWithArguments ::=
        Identifier
        (IW)? LeftParen
        (IW)? (PredicateList)?
        (IW)? RightParen
    Identifier ::=
        (
        PredicateIdentifier
        | Assignee
        )
    IndexValue ::=
        KeysOfVariadicVariable ( Digit | Variable )
    self ::=
        "self"
    PredicateList ::=
        Predicate ( ( CW )* Comma ( CW )* Predicate )*
/* A compound Predicate has its own boolean expressions to avoid mixing up with Pl0Propositions */
    CompoundPredicate ::=
        (
        Conjunction
        | Disjunction
        | Implication
        | Equivalence
        | ExclusiveOr
        | Negation
        | All
        | Exists
        )
    IsOperator ::=
        is
        (IW)? LeftParen
        ( CW )* ( IndexValue | Identifier )
        ( CW )* Comma
        (IW)? GeneralType
        (IW)? RightParen
    Negation ::=
        not
        (IW)? ParenthesisedPredicate
    Conjunction ::=
        and
        ( CW )* LeftParen
        ( CW )* PredicateList
        ( CW )* RightParen
    Disjunction ::=
        or
        ( CW )* LeftParen
        ( CW )* PredicateList
        ( CW )* RightParen
    Implication ::=
        impl
        (CW)? LeftParen
        ( CW )* Predicate
        ( CW )* Comma
        ( CW )* Predicate
        ( CW )* RightParen
    Equivalence ::=
        iif
        (CW)? LeftParen
        ( CW )* Predicate
        ( CW )* Comma
        ( CW )* Predicate
        ( CW )* RightParen
    ExclusiveOr ::=
        xor
        (CW)? LeftParen
        ( CW )* Predicate
        ( CW )* Comma
        ( CW )* Predicate
        ( CW )* RightParen
    ParenthesisedPredicate ::=
        LeftParen
        ( CW )* Predicate
        ( CW )* RightParen
    All ::=
        all SW VariableList
        (CW)? ParenthesisedPredicate
    all ::=
        "all"
    Exists ::=
        ExistsHeader SW VariableList
        (CW)? ParenthesisedPredicate
    ex ::=
        "ex"
    ExistsHeader ::=
        (
        ExistsTimesN
        | ex
        )
    ExistsTimesN ::=
        ex Dollar Digit
    Dollar ::=
        ""
    PythonDelegate ::=
        py Dot PythonIdentifier
        (IW)? LeftParen
        (IW)? PredicateList
        (IW)? RightParen
    PythonIdentifier ::=
regular_expression '/[a-z_]+/'
    py ::=
        "py"
    LeftBracket ::=
        "["
    RightBracket ::=
        "]"
/* Statements */
    StatementList ::=
        Statement SW ( ( CW )* Statement SW )*
    Statement ::=
        (
        PythonDelegate
        | CaseStatement
        | AssertionStatement
        | AssignmentStatement
        | RangeStatement
        | LoopStatement
        | ReturnStatement
        )
    ReturnStatement ::=
        ReturnHeader SW Predicate
    CaseStatement ::=
        cases
        ( CW )* LeftParen
        ( CW )* ConditionFollowedByResultList
        ( CW )* DefaultResult
        ( CW )* RightParen
    LoopStatement ::=
        loop
        SW RangeOrLoopBody
    RangeStatement ::=
        range
        SW RangeOrLoopBody
    RangeOrLoopBody ::=
        Assignee
        SW VariableRange
        ( CW )* LeftParen
        ( CW )* StatementList
        ( CW )* RightParen
    VariableRange ::=
        KeysOfVariadicVariable
        | ClosedOrOpenRange
        | Assignee
    KeysOfVariadicVariable ::=
        Variable Dollar
    ClosedOrOpenRange ::=
        LeftBound (IW)? Range (IW)? RightBound
    LeftBound ::=
        LeftBracket (IW)? (ExclamationMark)?
    RightBound ::=
        (ExclamationMark)? (IW)? RightBracket
    ExclamationMark ::=
        "!"
    range ::=
        "range"
    loop ::=
        "loop"
    DefaultResult ::=
        else
        (IW)? Colon
        ( CW )* StatementList
    AssignmentStatement ::=
        Assignee (IW)? ColonEqual (IW)? Predicate
    Assignee ::=
        (
        EntityWithCoord
        | Entity
        )
    ReturnHeader ::=
        (
        return
        | ret
        )
    UndefinedHeader ::=
        (
        undefined
        | undef
        )
    return ::=
        "return"
    ret ::=
        "ret"
    undefined ::=
        "undefined"
    undef ::=
        "undef"
    ColonEqual ::=
        ":="
    else ::=
        "else"
    case ::=
        "case"
    cases ::=
        "cases"
/* names and identifiers */
/* PascalCase identifiers separated by points */
    Dot ::=
        "."
    LeftBrace ::=
        "{"
    RightBrace ::=
        "}"
    LeftParen ::=
        "("
    RightParen ::=
        ")"
    Comma ::=
        ","
    Star ::=
        "*"
    Colon ::=
        ":"
    NamespaceIdentifier ::=
        IdStartsWithCap ( Dot IdStartsWithCap )*
    ArgumentIdentifier ::=
        (
        DigitIdSmallCase
        | Digit
        )
    DigitIdSmallCase ::=
regular_expression '/\d+[a-z][a-z0-9A-Z_]*/'
    WildcardTheoryNamespace ::=
        NamespaceIdentifier (NamespaceModifier)?
    NamespaceModifier ::=
        (
        Dot Star
        | Alias
        )
    Alias ::=
        SW alias SW IdStartsWithCap
    alias ::=
        "alias"
    IdStartsWithCap ::=
regular_expression '/[A-Z][a-z0-9A-Z_]*/'
    IdStartsWithSmallCase ::=
regular_expression '/[a-z][a-z0-9A-Z_]*/'
    SW ::=
        IW
    CW ::=
        (
        IW
        | Comment
        | LongComment
        )
    Comment ::=
regular_expression '/\/\/[^\n]*/'
    LongComment ::=
regular_expression '/\/\*((?:.|\n)*?)\*\//'
    IW ::=
regular_expression '/(\r\n\t]+/'
/* a Pascal Case id. */
/* This ensures that they will not be mixed-up with original FPL ebnf productions */
/* that are all PascalCase as well as FPL keywords, that are all small case. */
    XId ::=
        At ext IdStartsWithCap
        Variable ::=
            IdStartsWithSmallCase
    Digit ::=
regular_expression '/\d+/'
/* Localization */
    LocalizationBlock ::=
        LocalizationHeader
        ( CW )* LeftBrace
        ( CW )* LocalizationList
        ( CW )* RightBrace
    LocalizationList ::=
        Localization ( ( CW )* Localization )*
    Localization ::=
        Predicate (IW)? ColonEqual (IW)? TranslationList (IW)? SemiColon
    SemiColon ::=
        ";"
    Tilde ::=
        "~"
    TranslationList ::=
        Translation ( SW Translation )*
    Translation ::=
        Tilde LanguageCode (IW)? Colon (IW)? EBNFTransl
    LanguageCode ::=
regular_expression '/[a-z]{3}/'
    EBNFTransl ::=
        EBNFTerm ( (IW)? EBNFBar (IW)? EBNFTerm )*
    EBNFTerm ::=
        EBNFFactor ( SW EBNFFactor )*
    EBNFFactor ::=
        (
        Variable
        | EBNFString
        | LeftParen (IW)? EBNFTransl (IW)? RightParen
        )
    EBNFString ::=
regular_expression '/\"[^\"\n]*\"/'
    EBNFBar ::=
        "|"
    LocalizationHeader ::=
        (
        localization
        | loc
        )
    localization ::=
        "localization"
    loc ::=
        "loc"
/* Extensions of the FPL language (have to be dynamic)! Lacking a pre-processor, we put the rules */
/* from the Proof of Concept of FPL code manually into the EBNF of the core FPL grammar. */
/* the IsOperand choice */
/* the PredicateOrFunctionalTerm choice */
    extDigit ::=
regular_expression '/\d+/'
