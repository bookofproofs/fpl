"""
This file was generated by the tool TatSuSAG (the TatSu syntax analyser generator)
Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
"""

from poc.classes.AuxISourceAnalyser import AuxISourceAnalyser
from poc.classes.AuxInterpretation import AuxInterpretation
from poc.classes.AuxRuleDependencies import AuxRuleDependencies
from poc.classes.AuxSTClass import AuxSTClass
from poc.classes.AuxSymbolTable import AuxSymbolTable
from poc.classes.AuxSTConstructor import AuxSTConstructor
from poc.classes.AuxSTVarSpecList import AuxSTVarSpecList
from poc.classes.AuxSTSignature import AuxSTSignature
from anytree import search


class ContextDefinitionClass(AuxInterpretation):
    def __init__(self, parse_list: list, parsing_info: AuxInterpretation):
        super().__init__(parsing_info.get_ast_info(), parsing_info.get_errors())
        self.building_block = AuxSTClass(parsing_info)
        self.aggregate_previous_rules(parse_list,
                                      AuxRuleDependencies.dep["DefinitionClass"] +
                                      AuxRuleDependencies.dep["ClassHeader"], self.rule_aggregator)

    def rule_aggregator(self, rule: str, parsing_info: AuxInterpretation):
        if rule in AuxRuleDependencies.dep["ClassHeader"]:
            self.stop_aggregation = True
        elif rule == "PredicateIdentifier":
            self.building_block.id = parsing_info.id
        elif rule == "Type":
            self.building_block.add_type(parsing_info.id)  # noqa
        elif rule == "ObjectDefinitionBlock":
            self.building_block.register_child(parsing_info.property_list)  # noqa
            self.building_block.register_child(parsing_info.constructor_list)  # noqa
            self.building_block.register_child(parsing_info.variable_spec)  # noqa

    def provide_default_constructor(self):
        classes_constructors = AuxSymbolTable.get_child_by_outline(self.building_block, AuxSymbolTable.classConstructors)
        any_constructor = search.findall_by_attr(classes_constructors, AuxSymbolTable.classConstructor,
                                                 name="outline")
        if len(any_constructor) == 0:
            # add an empty constructor
            constructor = AuxSTConstructor(self)
            constructor.id = self.building_block.id + "[]"  # the same (empty) signature as that of the class
            constructor.outline = AuxSymbolTable.classDefaultConstructor
            # with an empty signature
            signature = AuxSTSignature(self)
            signature.parent = constructor
            # and an empty specification list
            variable_spec = AuxSTVarSpecList()
            variable_spec.parent = constructor
            constructor.parent = classes_constructors

    @staticmethod
    def dispatch(i: AuxISourceAnalyser, parsing_info: AuxInterpretation):
        new_info = ContextDefinitionClass(i.parse_list, parsing_info)
        new_info.provide_default_constructor()
        new_info.building_block.children = reversed(new_info.building_block.children)
        i.parse_list.append(new_info)
