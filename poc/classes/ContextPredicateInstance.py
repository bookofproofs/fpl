"""
This file was generated by the tool TatSuSAG (the TatSu syntax analyser generator)
Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
"""


from poc.classes.AuxISourceAnalyser import AuxISourceAnalyser
from poc.classes.AuxInterpretation import AuxInterpretation
from poc.classes.AuxRuleDependencies import AuxRuleDependencies
from poc.classes.AuxSTPredicateInstance import AuxSTPredicateInstance
from poc.classes.AuxSTPredicate import AuxSTPredicate
from poc.classes.AuxSymbolTable import AuxSymbolTable


class ContextPredicateInstance(AuxInterpretation):
    def __init__(self, i: AuxISourceAnalyser):
        super().__init__(i.ast_info, i.errors)
        self._i = i
        self.building_block = AuxSTPredicateInstance(i)
        self.aggregate_previous_rules(i.parse_list,
                                      AuxRuleDependencies.dep["PredicateInstance"], self.rule_aggregator)

    def rule_aggregator(self, rule: str, parsing_info: AuxInterpretation):
        if rule == "PredicateHeader":
            self.building_block.keyword = parsing_info.get_ast_info().cst
            self.stop_aggregation = True
        elif rule == "Signature":
            self.building_block.id = parsing_info.symbol_signature.to_string()  # noqa
            parsing_info.symbol_signature.children = reversed(parsing_info.symbol_signature.children)  # noqa
            self.building_block.register_child(parsing_info.symbol_signature)  # noqa
        elif rule == "PredicateInstanceBlock":
            if parsing_info.predicate is None:
                self.building_block.register_child(AuxSTPredicate(AuxSymbolTable.intrinsic, self._i))
            else:
                self.building_block.register_child(parsing_info.predicate)  # noqa
            self.building_block.register_child(parsing_info.variable_spec)  # noqa

    @staticmethod
    def dispatch(i: AuxISourceAnalyser, parsing_info: AuxInterpretation):
        new_info = ContextPredicateInstance(i)
        new_info.building_block.children = reversed(new_info.building_block.children)
        i.parse_list.append(new_info)
