"""
This file was generated by the tool TatSuSAG (the TatSu syntax analyser generator)
Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
"""

from poc.classes.AuxISourceAnalyser import AuxISourceAnalyser
from poc.classes.AuxInterpretation import AuxInterpretation
from poc.classes.AuxRuleDependencies import AuxRuleDependencies
from poc.classes.AuxSTProperties import AuxSTProperties
from poc.classes.AuxSTConstructors import AuxSTConstructors
from poc.classes.AuxSTConstructor import AuxSTConstructor


class ContextDefinitionContentList(AuxInterpretation):

    def __init__(self, i: AuxISourceAnalyser):
        super().__init__(i.ast_info, i.errors)
        self.constructor_list = AuxSTConstructors()
        self.property_list = AuxSTProperties()
        self.aggregate_previous_rules(i.parse_list,
                                      AuxRuleDependencies.dep["DefinitionContentList"], self.rule_aggregator)

    def rule_aggregator(self, rule: str, parsing_info: AuxInterpretation):
        if rule == "DefinitionContent":
            if type(parsing_info.building_block) is AuxSTConstructor:
                parsing_info.building_block.parent = self.constructor_list  # noqa
            else:
                parsing_info.building_block.parent = self.property_list  # noqa

    @staticmethod
    def dispatch(i: AuxISourceAnalyser, parsing_info: AuxInterpretation):
        new_info = ContextDefinitionContentList(i)
        new_info.constructor_list.children = reversed(new_info.constructor_list.children)
        new_info.property_list.children = reversed(new_info.property_list.children)
        i.parse_list.append(new_info)
