"""
This file was generated by the tool TatSuSAG (the TatSu syntax analyser generator)
Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
"""

from poc.classes.AuxInterpretation import AuxInterpretation
from poc.classes.AuxRuleDependencies import AuxRuleDependencies
from poc.classes.AuxPredicate import AuxPredicate
from poc.classes.AuxSymbolTable import AuxSymbolTable


class All(AuxInterpretation):

    def __init__(self, parse_list: list, parsing_info: AuxInterpretation):
        super().__init__(parsing_info.get_ast_info(), parsing_info.get_errors())
        self.info = parsing_info
        self.predicate = AuxPredicate(AuxSymbolTable.predicate_all)
        self.aggregate_previous_rules(parse_list, AuxRuleDependencies.dep["All"], self.rule_aggregator)

    def rule_aggregator(self, rule: str, parsing_info: AuxInterpretation):
        if rule == "VariableList":
            for var in parsing_info.var_list:
                self.predicate.bind_var(var)
        elif rule == "ParenthesisedPredicate":
            self.predicate.register_child(parsing_info.predicate)
        elif rule == "all":
            self.stop_aggregation = True
