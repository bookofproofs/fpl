"""
This file was generated by the tool TatSuSAG (the TatSu syntax analyser generator)
Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
"""

from poc.classes.AuxISourceAnalyser import AuxISourceAnalyser
from poc.classes.AuxInterpretation import AuxInterpretation
from poc.classes.AuxRuleDependencies import AuxRuleDependencies
from poc.classes.AuxSTSelf import AuxSTSelf


class ContextEntity(AuxInterpretation):

    def __init__(self, i: AuxISourceAnalyser):
        super().__init__(i.ast_info, i.errors)
        self.predicate = None
        self.rule = None
        self._i = i
        self.aggregate_previous_rules(i.parse_list,
                                      AuxRuleDependencies.dep["Entity"] +
                                      AuxRuleDependencies.dep["AtList"], self.rule_aggregator)

    def rule_aggregator(self, rule: str, parsing_info: AuxInterpretation):
        if rule == "Variable":
            self.rule = rule
            # wrap the variable for the symbol table
            self.predicate = parsing_info.var  # noqa
            self.stop_aggregation = True
        elif rule == "At":
            self.predicate.number_ats += 1
        elif rule == "self":
            self.rule = rule
            # wrap self for the symbol table
            self.predicate = AuxSTSelf(self._i)
            self.predicate.zto = self._i.last_positions_by_rule['self'].pos_to_str()
            self.predicate.zfrom = self._i.corrected_position('self')

    @staticmethod
    def dispatch(i: AuxISourceAnalyser, parsing_info: AuxInterpretation):
        new_info = ContextEntity(i)
        if type(new_info.predicate) is AuxSTSelf:
            new_info.predicate.zfrom = AuxISourceAnalyser.corrected_zpos_by(new_info.predicate.zfrom,
                                                                            new_info.predicate.number_ats)
        i.parse_list.append(new_info)
