"""
This file was generated by the tool TatSuSAG (the TatSu syntax analyser generator)
Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
"""


from poc.classes.AuxInterpretation import AuxInterpretation
from poc.classes.AuxRuleDependencies import AuxRuleDependencies
from poc.classes.AuxISourceAnalyser import AuxISourceAnalyser


class ContextTypeWithCoord(AuxInterpretation):

    def __init__(self, i: AuxISourceAnalyser):
        super().__init__(i.ast_info, i.errors)
        self.type = None
        self.rangeOrCoord = None
        self._right_bound_included = True
        self.aggregate_previous_rules(i.parse_list,
                                      AuxRuleDependencies.dep["TypeWithCoord"], self.rule_aggregator)

    def rule_aggregator(self, rule: str, parsing_info: AuxInterpretation):
        if rule == "Type":
            self.type = parsing_info
        elif rule == "LeftBound":
            self.rangeOrCoord.left_bound_included = parsing_info.bound_included  # noqa
        elif rule == "RangeInType":
            self.rangeOrCoord = parsing_info.range  # noqa
            self.rangeOrCoord.right_bound_included = self._right_bound_included
        elif rule == "CoordInType":
            self.rangeOrCoord = parsing_info.predicate  # noqa
        elif rule == "RightBound":
            self._right_bound_included = parsing_info.bound_included  # noqa

    @staticmethod
    def dispatch(i: AuxISourceAnalyser, parsing_info: AuxInterpretation):
        new_info = ContextTypeWithCoord(i)
        i.parse_list.append(new_info)

