"""
This file was generated by the tool TatSuSAG (the TatSu syntax analyser generator)
Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
"""

from poc.classes.AuxISourceAnalyser import AuxISourceAnalyser
from poc.classes.AuxInterpretation import AuxInterpretation
from poc.classes.AuxRuleDependencies import AuxRuleDependencies
from poc.classes.AuxSymbolTableHelpers import AuxSymbolTableHelpers
from poc.classes.AuxSTVarSpecList import AuxSTVarSpecList


class ContextVariableSpecificationList(AuxInterpretation):

    def __init__(self, i: AuxISourceAnalyser):
        super().__init__(i.ast_info, i.errors)  # noqa
        self.variable_spec = AuxSTVarSpecList()
        self._i = i
        self.aggregate_previous_rules(i.parse_list,
                                      AuxRuleDependencies.dep["VariableSpecificationList"] +
                                      ["VariableSpecification"], self.rule_aggregator)

    def rule_aggregator(self, rule: str, parsing_info: AuxInterpretation):
        if rule == "VariableSpecification":
            ContextVariableSpecificationList.consume_variable_specification(self._i, parsing_info, self)  # noqa

    @staticmethod
    def dispatch(i: AuxISourceAnalyser, parsing_info: AuxInterpretation):
        new_info = ContextVariableSpecificationList(i)
        new_info.variable_spec.children = reversed(new_info.variable_spec.children)
        i.parse_list.append(new_info)

    @staticmethod
    def consume_variable_specification(i: AuxISourceAnalyser, parsing_info, parent_with_var_spec):
        if parsing_info.named_var_declaration is not None:  # noqa
            # we have variable declaration and register all its variables as a single variable declaration node
            # in the symbol table
            if parsing_info.named_var_declaration.var_list is not None:
                parsing_info.named_var_declaration.var_list.reverse()  # noqa
            AuxSymbolTableHelpers.add_vars_to_node(i, parent_with_var_spec.variable_spec,
                                            parsing_info.named_var_declaration)  # noqa
        else:
            # we have a statement and register it as a single statement node in the symbol table
            parsing_info.statement.parent = parent_with_var_spec.variable_spec  # noqa
