"""
This file was generated by the tool TatSuSAG (the TatSu syntax analyser generator)
Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
"""


from poc.classes.AuxInterpretation import AuxInterpretation
from poc.classes.AuxRuleDependencies import AuxRuleDependencies


class Entity(AuxInterpretation):

    def __init__(self, parse_list: list, parsing_info: AuxInterpretation):
        super().__init__(parsing_info.get_ast_info(), parsing_info.get_errors())
        self.info = parsing_info
        self.variable = None
        self.id = None
        self.self_instance = False
        self.self_instance_ats = 0
        self.symbol_node = None  # this attribute will be the node in the symbol table pointing to the entity
        self.aggregate_previous_rules(parse_list,
                                      AuxRuleDependencies.dep["Entity"], self.rule_aggregator)

    def rule_aggregator(self, rule: str, parsing_info: AuxInterpretation):
        if rule == "Variable":
            self.variable = parsing_info
            self.id = parsing_info.id
            self.stop_aggregation = True
        elif rule == "AtList":
            self.self_instance_ats = len(parsing_info.get_cst()[0])  # length of the @list
            self.stop_aggregation = True
        elif rule == "self":
            self.self_instance = True
            self.id = parsing_info.id

