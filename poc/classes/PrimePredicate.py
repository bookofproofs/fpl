"""
This file was generated by the tool TatSuSAG (the TatSu syntax analyser generator)
Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
"""

from poc.classes.AuxInterpretation import AuxInterpretation
from poc.classes.AuxRuleDependencies import AuxRuleDependencies
from poc.classes.AuxPredicate import AuxPredicate
from poc.classes.AuxSymbolTable import AuxSymbolTable


class PrimePredicate(AuxInterpretation):

    def __init__(self, parse_list: list, parsing_info: AuxInterpretation):
        super().__init__(parsing_info.get_ast_info(), parsing_info.get_errors())
        self.info = parsing_info
        self.predicate = None
        self.id = None
        self.aggregate_previous_rules(parse_list,
                                      AuxRuleDependencies.dep["PrimePredicate"], self.rule_aggregator)

    def rule_aggregator(self, rule: str, parsing_info: AuxInterpretation):
        self.id = parsing_info.id
        if rule == "PredicateWithArguments":
            self.predicate = parsing_info.predicate
        elif rule == "QualifiedIdentifier":
            raise NotImplementedError("QualifiedIdentifier")
        elif rule == "Statement":
            raise NotImplementedError("Statement")
        elif rule == "Identifier":
            # convert the identifier to AuxPredicate
            if parsing_info.rule == "PredicateIdentifier":
                raise NotImplementedError("PredicateIdentifier")
            elif parsing_info.rule == "IndexValue":
                raise NotImplementedError("IndexValue")
            elif parsing_info.rule == "Assignee":
                if parsing_info.assignee.entity.self_instance:
                    self.predicate = AuxPredicate(AuxSymbolTable.selfInstance)
                    self.predicate.register_reference(parsing_info.identifier.assignee.entity.symbol_node)
                else:
                    # the assignee is a variable
                    self.predicate = AuxPredicate(AuxSymbolTable.var)
                    self.predicate.register_reference(parsing_info.symbol_node)
        elif rule == "IsOperator":
            # convert the is operator to AuxPredicate
            self.predicate = AuxPredicate(AuxSymbolTable.isOperator)
            self.predicate.register_reference(parsing_info.identifier.assignee.entity.symbol_node)
            self.predicate.register_referenced_type(parsing_info.general_type.symbol_node)
        elif rule == "true":
            self.predicate = parsing_info.predicate
        elif rule == "false":
            self.predicate = parsing_info.predicate
        elif rule == "UndefinedHeader":
            raise NotImplementedError("UndefinedHeader")
        elif rule == "ArgumentParam":
            raise NotImplementedError("ArgumentParam")
        elif rule == "extDigit":
            raise NotImplementedError("extDigit")
