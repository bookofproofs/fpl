class AuxSTConstants:
    arg_id = "argID"
    arg_list = "arguments"
    block_def = "definition"
    block_def_root = "definitions"
    block_thm = "theorem"
    block_thm_root = "theorems"
    block_axiom = "axiom"
    block_axiom_root = "axioms"
    block_ir = "inferenceRule"
    block_ir_root = "inferenceRules"
    block_lem = "lemma"
    block_lem_root = "lemmas"
    block_prop = "proposition"
    block_prop_root = "propositions"
    block_cor = "corollary"
    block_cor_root = "corollaries"
    block_proof = "proof"
    block_proof_root = "proofs"
    block_conj = "conjecture"
    block_conj_root = "conjectures"
    classConstructors = "constructors"
    classConstructor = "constructor"
    classDefaultConstructor = "defaultConstructor"
    classDeclaration = "class"
    classInstance = "classInstance"
    con = "con"
    content = "content"
    coordinates = "coordinates"
    copied_path = "_copied_path"
    ebnf_factor = "EBNFFactor"
    ebnf_string = "EBNFString"
    ebnf_term = "EBNFTerm"
    ebnf_transl = "EBNFTransl"
    entity = "entity"
    extDigit = "extDigit"
    file = "file"
    functionalTerm = "functionalTerm"
    functionalTermInstance = "functionalTermInstance"
    functionalTermImage = "image"
    generic = "generic"
    globals = "globals"
    ids = "id"
    int = "int"
    intrinsic = "intrinsic"
    image = "image"
    justification = "justification"
    library = "library"
    localization = "localization"
    localization_root = "localizations"
    mandatory = "mandatory"
    namespace = "namespace"
    obj = "object"
    param = "param"
    pre = "pre"
    preReferenced = "referencedPre"
    predicate = "predicate"
    predicate_all = "all"
    predicate_conjunction = "and"
    predicate_disjunction = "or"
    predicate_equivalence = "<=>"
    predicate_exists = "ex"
    predicate_exclusiveOr = "xor"
    predicate_false = "false"
    predicate_implication = "=>"
    predicate_negation = "not"
    predicate_true = "true"
    predicate_identifier = "predicateIdentifier"
    predicateDeclaration = "predicateDeclaration"
    predicateInstance = "predicateInstance"
    properties = "properties"
    proofArgument = "argument"
    proofArgument_root = "arguments"
    qualified = "qualified"
    optional = "optional"
    outline = "outline"
    property = "property"
    qualified_re = r"\[([0-9,\+\*\[\]:a-zA-Z_\$]*)\]"
    rng = "range"
    root = "root"
    selfInstance = "self"
    signature = "signature"
    signature_class = "signature_class"
    statements = "statements"
    statement_list = "stmtList"
    statement_assert = "assert"
    statement_assign = ":="
    statement_cases = "cases"
    statement_case = "case"
    statement_case_default = "else"
    statement_is = "is"
    statement_loop = "loop"
    statement_py = "py"
    statement_range = "range"
    statement_return = "return"
    theoremLikeStmt = "theoremLikeStmt"
    theory = "theory"
    theoryName = "theory_file_name"
    translation = "translation"
    translation_list = "translationList"
    type = "type"
    undefined = "undefined"
    undetermined = "undetermined"
    used = "used"
    uses = "uses"
    uninterpreted = "uninterpreted"
    var = "var"
    var_decl = "var_decl"  # noqa
    var_spec = "specificationList"
    variadic_var = "variadicVar"
