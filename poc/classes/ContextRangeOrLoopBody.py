"""
This file was generated by the tool TatSuSAG (the TatSu syntax analyser generator)
Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
"""

from poc.classes.AuxISourceAnalyser import AuxISourceAnalyser
from poc.classes.AuxInterpretation import AuxInterpretation
from poc.classes.AuxRuleDependencies import AuxRuleDependencies
from poc.classes.AuxSymbolTable import AuxSymbolTable
from poc.classes.AuxSTRange import AuxSTRange
from poc.classes.AuxSTPredicate import AuxSTPredicate


class ContextRangeOrLoopBody(AuxInterpretation):

    def __init__(self, i: AuxISourceAnalyser):
        super().__init__(i.ast_info, i.errors)
        self.varCounter = AuxSTPredicate(AuxSymbolTable.ids, i)
        self.varCounter.set_id("")
        self.varRange = AuxSTRange(i)
        self.statement_list = None
        self.aggregate_previous_rules(i.parse_list,
                                      AuxRuleDependencies.dep["RangeOrLoopBody"], self.rule_aggregator)

    def rule_aggregator(self, rule: str, parsing_info: AuxInterpretation):
        if rule == "Assignee":
            self.varCounter = parsing_info.predicate  # noqa
            self.stop_aggregation = True
        elif rule == "VariableRange":
            if type(parsing_info.predicate) is AuxSTRange:
                self.varRange = parsing_info.predicate
            else:
                self.varRange.register_child(parsing_info.predicate)  # noqa
        elif rule == "StatementList":
            self.statement_list = parsing_info.statement_list  # noqa

    @staticmethod
    def dispatch(i: AuxISourceAnalyser, parsing_info: AuxInterpretation):
        new_info = ContextRangeOrLoopBody(i)
        i.parse_list.append(new_info)

