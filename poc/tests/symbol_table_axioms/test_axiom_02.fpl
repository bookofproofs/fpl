TestNamespace
{
    theory
    {
        axiom ZeroIsNat()
        {
            is(Zero,Nat)
        }

        axiom ZeroIsNotSuccessor()
        {
            n: Nat
            all n
            (
                NotEquals(Zero(), Succ(n))
            )
        }

    }
}

##############################
AnyNode(outline='root')
├── AnyNode(outline='globals')
│   ├── AuxSTGlobal(gid='TestNamespace.ZeroIsNat[]', id='ZeroIsNat[]', reference=AuxSTAxiom())
│   └── AuxSTGlobal(gid='TestNamespace.ZeroIsNotSuccessor[]', id='ZeroIsNotSuccessor[]', reference=AuxSTAxiom())
└── AuxSTTheory(checksum='54ed38305139b195df3a1cce8a3c340b', file_name='test_axiom_02.fpl', namespace='TestNamespace', outline='theory')
    ├── AuxSTOutline(outline='uses')
    ├── AuxSTOutline(outline='axioms')
    │   ├── AuxSTAxiom(id='ZeroIsNat[]', keyword='axiom', outline='axiom', zfrom='5:8:41', zto='8:9:103')
    │   │   ├── AuxSTSignature(outline='signature', zfrom='5:15:48', zto='5:25:58')
    │   │   ├── AuxSTVarSpecList(outline='specificationList')
    │   │   └── AuxSTStatement(outline='statement', type='is', zfrom='7:12:81', zto='7:24:93')
    │   │       ├── AuxSTPredicate(id='Zero', outline='id', zfrom='7:15:84', zto='7:19:88')
    │   │       └── AuxSTType(id='Nat', outline='type', type_mod=None, type_pattern=1, zfrom='7:20:89', zto='7:23:92')
    │   └── AuxSTAxiom(id='ZeroIsNotSuccessor[]', keyword='axiom', outline='axiom', zfrom='10:8:113', zto='17:9:267')
    │       ├── AuxSTSignature(outline='signature', zfrom='10:15:120', zto='10:34:139')
    │       ├── AuxSTVarSpecList(outline='specificationList')
    │       │   └── AuxSTVarDec(id='n', outline='var_decl', type='Nat', type_mod=None, type_pattern=1, zfrom='12:12:162', zto='12:18:168')
    │       └── AuxSTPredicate(bound_vars=['n'], outline='all', zfrom='13:12:181', zto='16:13:257')
    │           └── AuxSTPredicateWithArgs(id='NotEquals', outline='predicateWithArgs', reference=None, zfrom='15:16:217', zto='15:42:243')
    │               ├── AuxSTPredicateWithArgs(id='Zero', outline='predicateWithArgs', reference=None, zfrom='15:22:223', zto='15:32:233')
    │               └── AuxSTPredicateWithArgs(id='Succ', outline='predicateWithArgs', reference=None, zfrom='15:34:235', zto='15:41:242')
    │                   └── AuxSTVariable(id='n', outline='var', zfrom='15:39:240', zto='15:40:241')
    ├── AuxSTOutline(outline='inferenceRules')
    ├── AuxSTOutline(outline='definitions')
    ├── AuxSTOutline(outline='theorems')
    ├── AuxSTOutline(outline='lemmas')
    ├── AuxSTOutline(outline='propositions')
    ├── AuxSTOutline(outline='conjectures')
    ├── AuxSTOutline(outline='corollaries')
    ├── AuxSTOutline(outline='proofs')
    └── AuxSTLocalizations(outline='localizations')