TestTheory
{
    theory
    {
        func Add(n,m: Nat)->Nat
        {
            k: Nat
            cases
            (
                case Equals(m,0):
                    return n
                case Equals(Succ(m), k):
                    return Succ(Add(n,k))
                else:
                    return undef
            )
        }
    }
}


##############################
AnyNode(outline='root')
├── AnyNode(outline='globals')
│   └── AuxSTGlobal(gid='TestTheory.Add[2:Nat]', id='Add[2:Nat]', reference=AuxSTDefinitionFunctionalTerm())
└── AuxSTTheory(checksum='4d0468fee190185eb6fb564fc394eebc', file_name='test_statement_cases_02.fpl', namespace='TestTheory', outline='theory')
    ├── AuxSTOutline(outline='uses')
    ├── AuxSTOutline(outline='axioms')
    ├── AuxSTOutline(outline='inferenceRules')
    ├── AuxSTOutline(outline='definitions')
    │   └── AuxSTDefinitionFunctionalTerm(def_type='functionalTerm', id='Add[2:Nat]', outline='definition', zfrom='5:9:39', zto='17:9:347')
    │       ├── AuxSTSignature(outline='signature', zfrom='5:14:44', zto='5:26:56')
    │       │   ├── AuxSTVarDec(id='n', outline='var_decl', zfrom='5:18:48', zto='5:25:55')
    │       │   │   └── AuxSTType(id='Nat', outline='type', type_mod=None, type_pattern=1, zfrom='5:22:52', zto='5:25:55')
    │       │   └── AuxSTVarDec(id='m', outline='var_decl', zfrom='5:18:48', zto='5:25:55')
    │       │       └── AuxSTType(id='Nat', outline='type', type_mod=None, type_pattern=1, zfrom='5:22:52', zto='5:25:55')
    │       ├── AuxSTType(id='Nat', outline='type', type_mod=None, type_pattern=1, zfrom='5:28:58', zto='5:31:61')
    │       ├── AuxSTVarSpecList(outline='specificationList')
    │       │   ├── AuxSTVarDec(id='k', outline='var_decl', zfrom='7:13:85', zto='7:18:90')
    │       │   │   └── AuxSTType(id='Nat', outline='type', type_mod=None, type_pattern=1, zfrom='7:15:87', zto='7:18:90')
    │       │   └── AuxSTStatement(outline='statement', type='cases', zfrom='12:17:203', zto='16:13:337')
    │       │       ├── AuxSTStatement(outline='statement', type='case', zfrom='10:22:145', zto='12:16:202')
    │       │       │   ├── AuxSTPredicateWithArgs(id='Equals', outline='predicateWithArgs', reference=None, zfrom='10:22:145', zto='10:32:155')
    │       │       │   │   └── AuxSTArgs(outline='arguments', zfrom='10:28:151', zto='10:32:155')
    │       │       │   │       ├── AuxSTVariable(id='m', outline='var', zfrom='10:29:152', zto='10:29:152')
    │       │       │   │       └── AuxSTPredicate(id='0', outline='extDigit', zfrom='10:31:154', zto='10:31:154')
    │       │       │   └── AuxSTVarSpecList(outline='specificationList')
    │       │       │       └── AuxSTStatement(outline='statement', type='return', zfrom='11:21:178', zto='11:28:185')
    │       │       │           └── AuxSTVariable(id='n', outline='var', zfrom='11:28:185', zto='11:28:185')
    │       │       ├── AuxSTStatement(outline='statement', type='case', zfrom='12:22:208', zto='14:16:285')
    │       │       │   ├── AuxSTPredicateWithArgs(id='Equals', outline='predicateWithArgs', reference=None, zfrom='12:22:208', zto='12:39:225')
    │       │       │   │   └── AuxSTArgs(outline='arguments', zfrom='12:28:214', zto='12:39:225')
    │       │       │   │       ├── AuxSTPredicateWithArgs(id='Succ', outline='predicateWithArgs', reference=None, zfrom='12:29:215', zto='12:35:221')
    │       │       │   │       │   └── AuxSTArgs(outline='arguments', zfrom='12:33:219', zto='12:35:221')
    │       │       │   │       │       └── AuxSTVariable(id='m', outline='var', zfrom='12:34:220', zto='12:34:220')
    │       │       │   │       └── AuxSTVariable(id='k', outline='var', zfrom='12:38:224', zto='12:38:224')
    │       │       │   └── AuxSTVarSpecList(outline='specificationList')
    │       │       │       └── AuxSTStatement(outline='statement', type='return', zfrom='13:21:248', zto='13:41:268')
    │       │       │           └── AuxSTPredicateWithArgs(id='Succ', outline='predicateWithArgs', reference=None, zfrom='13:28:255', zto='13:41:268')
    │       │       │               └── AuxSTArgs(outline='arguments', zfrom='13:32:259', zto='13:41:268')
    │       │       │                   └── AuxSTPredicateWithArgs(id='Add', outline='predicateWithArgs', reference=None, zfrom='13:33:260', zto='13:40:267')
    │       │       │                       └── AuxSTArgs(outline='arguments', zfrom='13:36:263', zto='13:40:267')
    │       │       │                           ├── AuxSTVariable(id='n', outline='var', zfrom='13:37:264', zto='13:37:264')
    │       │       │                           └── AuxSTVariable(id='k', outline='var', zfrom='13:39:266', zto='13:39:266')
    │       │       └── AuxSTStatement(outline='statement', type='else', zfrom='14:17:286', zto='16:12:336')
    │       │           └── AuxSTVarSpecList(outline='specificationList')
    │       │               └── AuxSTStatement(outline='statement', type='return', zfrom='15:21:312', zto='15:32:323')
    │       │                   └── AuxSTPredicate(outline='undefined', zfrom='15:28:319', zto='15:32:323')
    │       └── AuxSTProperties(outline='properties')
    ├── AuxSTOutline(outline='theorems')
    ├── AuxSTOutline(outline='lemmas')
    ├── AuxSTOutline(outline='propositions')
    ├── AuxSTOutline(outline='conjectures')
    ├── AuxSTOutline(outline='corollaries')
    ├── AuxSTOutline(outline='proofs')
    └── AuxSTLocalizations(outline='localizations')