TestTheory
{
    theory
    {
        func Add(n,m: Nat)->Nat
        {
            k: Nat
            cases
            (
                case Equals(m,0):
                    return n
                case Equals(Succ(m), k):
                    return Succ(Add(n,k))
                else:
                    return undef
            )
        }
    }
}


##############################
AnyNode(outline='root')
├── AnyNode(outline='globals')
│   └── AuxSTGlobal(gid='TestTheory.Add[2:Nat]', id='Add[2:Nat]', reference=AuxSTDefinitionFunctionalTerm(), theory=AuxSTTheory())
└── AuxSTTheory(checksum='4d0468fee190185eb6fb564fc394eebc', file_name='test_statement_cases_02.fpl', namespace='TestTheory', outline='theory')
    ├── AuxSTOutline(outline='uses')
    ├── AuxSTOutline(outline='axioms')
    ├── AuxSTOutline(outline='inferenceRules')
    ├── AuxSTOutline(outline='definitions')
    │   └── AuxSTDefinitionFunctionalTerm(def_type='functionalTerm', id='Add[2:Nat]', outline='definition', zfrom='5.9', zto='17.9')
    │       ├── AuxSTSignature(outline='signature', zfrom='5.14', zto='5.26')
    │       │   ├── AuxSTVarDec(id='n', outline='var_decl', zfrom='5.17', zto='5.25')
    │       │   │   └── AuxSTType(id='Nat', outline='type', type_mod=None, type_pattern=1, zfrom='5.22', zto='5.25')
    │       │   └── AuxSTVarDec(id='m', outline='var_decl', zfrom='5.17', zto='5.25')
    │       │       └── AuxSTType(id='Nat', outline='type', type_mod=None, type_pattern=1, zfrom='5.22', zto='5.25')
    │       ├── AuxSTType(id='Nat', outline='type', type_mod=None, type_pattern=1, zfrom='5.28', zto='5.31')
    │       ├── AuxSTVarSpecList(outline='specificationList')
    │       │   ├── AuxSTVarDec(id='k', outline='var_decl', zfrom='7.12', zto='7.18')
    │       │   │   └── AuxSTType(id='Nat', outline='type', type_mod=None, type_pattern=1, zfrom='7.15', zto='7.18')
    │       │   └── AuxSTStatement(outline='statement', type='cases', zfrom='12.17', zto='16.13')
    │       │       ├── AuxSTStatement(outline='statement', type='case', zfrom='10.21', zto='12.16')
    │       │       │   ├── AuxSTPredicateWithArgs(id='Equals', outline='predicateWithArgs', reference=None, zfrom='10.21', zto='10.32')
    │       │       │   │   └── AuxSTArgs(outline='arguments', zfrom='10.28', zto='10.32')
    │       │       │   │       ├── AuxSTVariable(id='m', outline='var', zfrom='10.28', zto='10.29')
    │       │       │   │       └── AuxSTPredicate(id='0', outline='extDigit', zfrom='10.31', zto='10.31')
    │       │       │   └── AuxSTVarSpecList(outline='specificationList')
    │       │       │       └── AuxSTStatement(outline='statement', type='return', zfrom='11.21', zto='11.28')
    │       │       │           └── AuxSTVariable(id='n', outline='var', zfrom='11.27', zto='11.28')
    │       │       ├── AuxSTStatement(outline='statement', type='case', zfrom='12.21', zto='14.16')
    │       │       │   ├── AuxSTPredicateWithArgs(id='Equals', outline='predicateWithArgs', reference=None, zfrom='12.21', zto='12.39')
    │       │       │   │   └── AuxSTArgs(outline='arguments', zfrom='12.28', zto='12.39')
    │       │       │   │       ├── AuxSTPredicateWithArgs(id='Succ', outline='predicateWithArgs', reference=None, zfrom='12.28', zto='12.35')
    │       │       │   │       │   └── AuxSTArgs(outline='arguments', zfrom='12.33', zto='12.35')
    │       │       │   │       │       └── AuxSTVariable(id='m', outline='var', zfrom='12.33', zto='12.34')
    │       │       │   │       └── AuxSTVariable(id='k', outline='var', zfrom='12.37', zto='12.38')
    │       │       │   └── AuxSTVarSpecList(outline='specificationList')
    │       │       │       └── AuxSTStatement(outline='statement', type='return', zfrom='13.21', zto='13.41')
    │       │       │           └── AuxSTPredicateWithArgs(id='Succ', outline='predicateWithArgs', reference=None, zfrom='13.27', zto='13.41')
    │       │       │               └── AuxSTArgs(outline='arguments', zfrom='13.32', zto='13.41')
    │       │       │                   └── AuxSTPredicateWithArgs(id='Add', outline='predicateWithArgs', reference=None, zfrom='13.32', zto='13.40')
    │       │       │                       └── AuxSTArgs(outline='arguments', zfrom='13.36', zto='13.40')
    │       │       │                           ├── AuxSTVariable(id='n', outline='var', zfrom='13.36', zto='13.37')
    │       │       │                           └── AuxSTVariable(id='k', outline='var', zfrom='13.38', zto='13.39')
    │       │       └── AuxSTStatement(outline='statement', type='else', zfrom='14.17', zto='16.12')
    │       │           └── AuxSTVarSpecList(outline='specificationList')
    │       │               └── AuxSTStatement(outline='statement', type='return', zfrom='15.21', zto='15.32')
    │       │                   └── AuxSTPredicate(outline='undefined', zfrom='15.28', zto='15.32')
    │       └── AuxSTProperties(outline='properties')
    ├── AuxSTOutline(outline='theorems')
    ├── AuxSTOutline(outline='lemmas')
    ├── AuxSTOutline(outline='propositions')
    ├── AuxSTOutline(outline='conjectures')
    ├── AuxSTOutline(outline='corollaries')
    ├── AuxSTOutline(outline='proofs')
    └── AuxSTLocalizations(outline='localizations')
