TestTheory
{
    theory
    {
        class Nat: obj
        {
            Nat(x: @extDecimal)
            {
                cases
                (
                    case Equals(x,0) :
                        self := Zero()
                    case Equals(x,1) :
                        self := Succ(Zero())
                    case Equals(x,2) :
                        self := Succ(Succ(Zero()))
                    else:
                        // else case addressed using a python delegate
                        self := Succ(py.decrement(x))
                )
            }
        }
    }
}
##############################
AnyNode(outline='root')
├── AnyNode(outline='globals')
│   ├── AuxSTGlobal(gid='TestTheory.Nat', id='Nat', reference=AuxSTClass())
│   └── AuxSTGlobal(gid='TestTheory.Nat[1:@extDecimal]', id='Nat[1:@extDecimal]', reference=AuxSTConstructor())
└── AuxSTTheory(checksum='f03e8ddb63742af2ea616f3f0163c2e1', file_name='test_statement_cases_01.fpl', namespace='TestTheory', outline='theory')
    ├── AuxSTOutline(outline='uses')
    ├── AuxSTOutline(outline='axioms')
    ├── AuxSTOutline(outline='inferenceRules')
    ├── AuxSTOutline(outline='definitions')
    │   └── AuxSTClass(class_types=['obj'], def_type='class', id='Nat', keyword='class', outline='definition', zfrom='5:9:39', zto='22:9:593')
    │       ├── AuxSTVarSpecList(outline='specificationList')
    │       ├── AuxSTConstructors(outline='constructors')
    │       │   └── AuxSTConstructor(id='Nat[1:@extDecimal]', outline='constructor', zfrom='7:13:76', zto='21:13:583')
    │       │       ├── AuxSTSignature(outline='signature', zfrom='7:13:76', zto='7:31:94')
    │       │       │   └── AuxSTVarDec(id='x', outline='var_decl', zfrom='7:17:80', zto='7:30:93')
    │       │       │       └── AuxSTType(id='@extDecimal', outline='type', type_mod=None, type_pattern=32, zfrom='7:19:82', zto='7:30:93')
    │       │       └── AuxSTVarSpecList(outline='specificationList')
    │       │           └── AuxSTStatement(outline='statement', type='cases', zfrom='15:21:332', zto='20:17:569')
    │       │               ├── AuxSTStatement(outline='statement', type='case', zfrom='11:26:175', zto='13:20:247')
    │       │               │   ├── AuxSTPredicateWithArgs(id='Equals', outline='predicateWithArgs', reference=None, zfrom='11:26:175', zto='11:36:185')
    │       │               │   │   └── AuxSTArgs(outline='arguments', zfrom='11:32:181', zto='11:36:185')
    │       │               │   │       ├── AuxSTVariable(id='x', outline='var', zfrom='11:33:182', zto='11:33:182')
    │       │               │   │       └── AuxSTPredicate(id='0', outline='extDigit', zfrom='11:35:184', zto='11:35:184')
    │       │               │   └── AuxSTVarSpecList(outline='specificationList')
    │       │               │       └── AuxSTStatement(outline='statement', type=':=', zfrom='12:25:213', zto='12:38:226')
    │       │               │           ├── AuxSTSelf(id='self', number_ats=0, outline='self', reference=None, zfrom='12:25:213', zto='12:28:216')
    │       │               │           └── AuxSTPredicateWithArgs(id='Zero', outline='predicateWithArgs', reference=None, zfrom='12:33:221', zto='12:38:226')
    │       │               │               └── AuxSTArgs(outline='arguments', zfrom='12:37:225', zto='12:38:226')
    │       │               ├── AuxSTStatement(outline='statement', type='case', zfrom='13:26:253', zto='15:20:331')
    │       │               │   ├── AuxSTPredicateWithArgs(id='Equals', outline='predicateWithArgs', reference=None, zfrom='13:26:253', zto='13:36:263')
    │       │               │   │   └── AuxSTArgs(outline='arguments', zfrom='13:32:259', zto='13:36:263')
    │       │               │   │       ├── AuxSTVariable(id='x', outline='var', zfrom='13:33:260', zto='13:33:260')
    │       │               │   │       └── AuxSTPredicate(id='1', outline='extDigit', zfrom='13:35:262', zto='13:35:262')
    │       │               │   └── AuxSTVarSpecList(outline='specificationList')
    │       │               │       └── AuxSTStatement(outline='statement', type=':=', zfrom='14:25:291', zto='14:44:310')
    │       │               │           ├── AuxSTSelf(id='self', number_ats=0, outline='self', reference=None, zfrom='14:25:291', zto='14:28:294')
    │       │               │           └── AuxSTPredicateWithArgs(id='Succ', outline='predicateWithArgs', reference=None, zfrom='14:33:299', zto='14:44:310')
    │       │               │               └── AuxSTArgs(outline='arguments', zfrom='14:37:303', zto='14:44:310')
    │       │               │                   └── AuxSTPredicateWithArgs(id='Zero', outline='predicateWithArgs', reference=None, zfrom='14:38:304', zto='14:43:309')
    │       │               │                       └── AuxSTArgs(outline='arguments', zfrom='14:42:308', zto='14:43:309')
    │       │               ├── AuxSTStatement(outline='statement', type='case', zfrom='15:26:337', zto='17:20:421')
    │       │               │   ├── AuxSTPredicateWithArgs(id='Equals', outline='predicateWithArgs', reference=None, zfrom='15:26:337', zto='15:36:347')
    │       │               │   │   └── AuxSTArgs(outline='arguments', zfrom='15:32:343', zto='15:36:347')
    │       │               │   │       ├── AuxSTVariable(id='x', outline='var', zfrom='15:33:344', zto='15:33:344')
    │       │               │   │       └── AuxSTPredicate(id='2', outline='extDigit', zfrom='15:35:346', zto='15:35:346')
    │       │               │   └── AuxSTVarSpecList(outline='specificationList')
    │       │               │       └── AuxSTStatement(outline='statement', type=':=', zfrom='16:25:375', zto='16:50:400')
    │       │               │           ├── AuxSTSelf(id='self', number_ats=0, outline='self', reference=None, zfrom='16:25:375', zto='16:28:378')
    │       │               │           └── AuxSTPredicateWithArgs(id='Succ', outline='predicateWithArgs', reference=None, zfrom='16:33:383', zto='16:50:400')
    │       │               │               └── AuxSTArgs(outline='arguments', zfrom='16:37:387', zto='16:50:400')
    │       │               │                   └── AuxSTPredicateWithArgs(id='Succ', outline='predicateWithArgs', reference=None, zfrom='16:38:388', zto='16:49:399')
    │       │               │                       └── AuxSTArgs(outline='arguments', zfrom='16:42:392', zto='16:49:399')
    │       │               │                           └── AuxSTPredicateWithArgs(id='Zero', outline='predicateWithArgs', reference=None, zfrom='16:43:393', zto='16:48:398')
    │       │               │                               └── AuxSTArgs(outline='arguments', zfrom='16:47:397', zto='16:48:398')
    │       │               └── AuxSTStatement(outline='statement', type='else', zfrom='17:21:422', zto='20:16:568')
    │       │                   └── AuxSTVarSpecList(outline='specificationList')
    │       │                       └── AuxSTStatement(outline='statement', type=':=', zfrom='19:51:549', zto='19:53:551')
    │       │                           ├── AuxSTSelf(id='self', number_ats=0, outline='self', reference=None, zfrom='19:25:523', zto='19:28:526')
    │       │                           └── AuxSTPredicateWithArgs(id='Succ', outline='predicateWithArgs', reference=None, zfrom='19:33:531', zto='19:53:551')
    │       │                               └── AuxSTArgs(outline='arguments', zfrom='19:37:535', zto='19:53:551')
    │       │                                   └── AuxSTStatement(id='decrement', outline='statement', type='py', zfrom='19:38:536', zto='19:52:550')
    │       │                                       └── AuxSTVariable(id='x', outline='var', zfrom='19:51:549', zto='19:51:549')
    │       └── AuxSTProperties(outline='properties')
    ├── AuxSTOutline(outline='theorems')
    ├── AuxSTOutline(outline='lemmas')
    ├── AuxSTOutline(outline='propositions')
    ├── AuxSTOutline(outline='conjectures')
    ├── AuxSTOutline(outline='corollaries')
    ├── AuxSTOutline(outline='proofs')
    └── AuxSTLocalizations(outline='localizations')
