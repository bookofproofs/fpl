TestTheory
{
    theory
    {
        class Group: Monoid
        {
            mandatory func InverseOf(x: tplSetElem) -> tplSetElem
            {
                val: tplSetElem
                assert
                    and
                    (
                        Equals( myOp(x,val), myOp(ketVal,x) ),
                        Equals( myOp(val,x), self.NeutralElem())
                    )
                ret val
            }
        }
    }
}
##############################
AnyNode(outline='root')
├── AnyNode(outline='globals')
│   ├── AuxSTGlobal(gid='TestTheory.Group', id='Group', reference=AuxSTClass())
│   ├── AuxSTGlobal(gid='TestTheory.Group[]', id='Group[]', reference=AuxSTConstructor())
│   └── AuxSTGlobal(gid='TestTheory.Group.InverseOf[1:tplSetElem]', id='Group.InverseOf[1:tplSetElem]', reference=AuxSTFunctionalTermInstance())
└── AuxSTTheory(checksum='96d29294d9aabc8d15a546eaf0fd9a54', file_name='test_statement_assert_01.fpl', namespace='TestTheory', outline='theory')
    ├── AuxSTOutline(outline='uses')
    ├── AuxSTOutline(outline='axioms')
    ├── AuxSTOutline(outline='inferenceRules')
    ├── AuxSTOutline(outline='definitions')
    │   └── AuxSTClass(class_types=['Monoid'], def_type='class', id='Group', keyword='class', outline='definition', zfrom='5:9:39', zto='18:9:446')
    │       ├── AuxSTVarSpecList(outline='specificationList')
    │       ├── AuxSTConstructors(outline='constructors')
    │       │   └── AuxSTConstructor(id='Group[]', outline='defaultConstructor', zfrom='', zto='')
    │       │       ├── AuxSTSignature(outline='signature', zfrom='14:51:363', zto='7:51:119')
    │       │       └── AuxSTVarSpecList(outline='specificationList')
    │       └── AuxSTProperties(outline='properties')
    │           └── AuxSTFunctionalTermInstance(def_type='functionalTermInstance', id='InverseOf[1:tplSetElem]', keyword='func', mandatory=True, outline='property', zfrom='7:13:81', zto='17:13:436')
    │               ├── AuxSTSignature(outline='signature', zfrom='7:28:96', zto='7:51:119')
    │               │   └── AuxSTVarDec(id='x', outline='var_decl', zfrom='7:38:106', zto='7:50:118')
    │               │       └── AuxSTType(id='tplSetElem', outline='type', type_mod=None, type_pattern=9, zfrom='7:40:108', zto='7:50:118')
    │               ├── AuxSTType(id='tplSetElem', outline='type', type_mod=None, type_pattern=9, zfrom='7:55:123', zto='7:65:133')
    │               └── AuxSTVarSpecList(outline='specificationList')
    │                   ├── AuxSTVarDec(id='val', outline='var_decl', zfrom='9:17:165', zto='9:31:179')
    │                   │   └── AuxSTType(id='tplSetElem', outline='type', type_mod=None, type_pattern=9, zfrom='9:21:169', zto='9:31:179')
    │                   ├── AuxSTStatement(outline='statement', type='assert', zfrom='10:17:197', zto='15:21:398')
    │                   │   └── AuxSTPredicate(outline='and', zfrom='11:21:224', zto='15:21:398')
    │                   │       ├── AuxSTPredicateWithArgs(id='Equals', outline='predicateWithArgs', reference=None, zfrom='13:25:274', zto='13:61:310')
    │                   │       │   └── AuxSTArgs(outline='arguments', zfrom='13:31:280', zto='13:61:310')
    │                   │       │       ├── AuxSTPredicateWithArgs(id='myOp', outline='predicateWithArgs', reference=None, zfrom='13:33:282', zto='13:43:292')
    │                   │       │       │   └── AuxSTArgs(outline='arguments', zfrom='13:37:286', zto='13:43:292')
    │                   │       │       │       ├── AuxSTVariable(id='x', outline='var', zfrom='13:38:287', zto='13:38:287')
    │                   │       │       │       └── AuxSTVariable(id='val', outline='var', zfrom='13:40:289', zto='13:42:291')
    │                   │       │       └── AuxSTPredicateWithArgs(id='myOp', outline='predicateWithArgs', reference=None, zfrom='13:46:295', zto='13:59:308')
    │                   │       │           └── AuxSTArgs(outline='arguments', zfrom='13:50:299', zto='13:59:308')
    │                   │       │               ├── AuxSTVariable(id='ketVal', outline='var', zfrom='13:51:300', zto='13:56:305')
    │                   │       │               └── AuxSTVariable(id='x', outline='var', zfrom='13:58:307', zto='13:58:307')
    │                   │       └── AuxSTPredicateWithArgs(id='Equals', outline='predicateWithArgs', reference=None, zfrom='14:25:337', zto='14:64:376')
    │                   │           └── AuxSTArgs(outline='arguments', zfrom='14:31:343', zto='14:64:376')
    │                   │               ├── AuxSTPredicateWithArgs(id='myOp', outline='predicateWithArgs', reference=None, zfrom='14:33:345', zto='14:43:355')
    │                   │               │   └── AuxSTArgs(outline='arguments', zfrom='14:37:349', zto='14:43:355')
    │                   │               │       ├── AuxSTVariable(id='val', outline='var', zfrom='14:38:350', zto='14:40:352')
    │                   │               │       └── AuxSTVariable(id='x', outline='var', zfrom='14:42:354', zto='14:42:354')
    │                   │               └── AuxSTSelf(id='self', number_ats=0, outline='self', reference=None, zfrom='14:46:358', zto='14:49:361')
    │                   │                   └── AuxSTQualified(outline='qualified', zfrom='14:50:362', zto='14:50:362')
    │                   │                       └── AuxSTPredicateWithArgs(id='NeutralElem', outline='predicateWithArgs', reference=None, zfrom='14:51:363', zto='14:63:375')
    │                   │                           └── AuxSTArgs(outline='arguments', zfrom='14:62:374', zto='14:63:375')
    │                   └── AuxSTStatement(outline='statement', type='return', zfrom='16:17:416', zto='16:23:422')
    │                       └── AuxSTVariable(id='val', outline='var', zfrom='16:21:420', zto='16:23:422')
    ├── AuxSTOutline(outline='theorems')
    ├── AuxSTOutline(outline='lemmas')
    ├── AuxSTOutline(outline='propositions')
    ├── AuxSTOutline(outline='conjectures')
    ├── AuxSTOutline(outline='corollaries')
    ├── AuxSTOutline(outline='proofs')
    └── AuxSTLocalizations(outline='localizations')