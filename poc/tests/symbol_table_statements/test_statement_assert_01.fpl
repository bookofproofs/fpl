TestTheory
{
    theory
    {
        class Group: Monoid
        {
            mandatory func InverseOf(x: tplSetElem) -> tplSetElem
            {
                val: tplSetElem
                assert
                    and
                    (
                        Equals( myOp(x,val), myOp(ketVal,x) ),
                        Equals( myOp(val,x), self.NeutralElem())
                    )
                ret val
            }
        }
    }
}
##############################
AnyNode(outline='root')
├── AnyNode(outline='globals')
│   ├── AuxSTGlobal(gid='TestTheory.Group', id='Group', reference=AuxSTClass())
│   ├── AuxSTGlobal(gid='TestTheory.Group[]', id='Group[]', reference=AuxSTConstructor())
│   └── AuxSTGlobal(gid='TestTheory.Group.InverseOf[1:tplSetElem]', id='Group.InverseOf[1:tplSetElem]', reference=AuxSTFunctionalTermInstance())
└── AuxSTTheory(checksum='96d29294d9aabc8d15a546eaf0fd9a54', file_name='test_statement_assert_01.fpl', namespace='TestTheory', outline='theory')
    ├── AuxSTOutline(outline='uses')
    ├── AuxSTOutline(outline='axioms')
    ├── AuxSTOutline(outline='inferenceRules')
    ├── AuxSTOutline(outline='definitions')
    │   └── AuxSTClass(class_types=['Monoid'], def_type='class', id='Group', keyword='class', outline='definition', zfrom='5.9', zto='18.9')
    │       ├── AuxSTVarSpecList(outline='specificationList')
    │       ├── AuxSTConstructors(outline='constructors')
    │       │   └── AuxSTConstructor(id='Group[]', outline='defaultConstructor', zfrom='', zto='')
    │       │       ├── AuxSTSignature(outline='signature', zfrom='14.51', zto='7.51')
    │       │       └── AuxSTVarSpecList(outline='specificationList')
    │       └── AuxSTProperties(outline='properties')
    │           └── AuxSTFunctionalTermInstance(def_type='functionalTermInstance', id='InverseOf[1:tplSetElem]', keyword='func', mandatory=True, outline='property', zfrom='7.13', zto='17.13')
    │               ├── AuxSTSignature(outline='signature', zfrom='7.28', zto='7.51')
    │               │   └── AuxSTVarDec(id='x', outline='var_decl', zfrom='7.37', zto='7.50')
    │               │       └── AuxSTType(id='tplSetElem', outline='type', type_mod=None, type_pattern=9, zfrom='7.40', zto='7.50')
    │               ├── AuxSTType(id='tplSetElem', outline='type', type_mod=None, type_pattern=9, zfrom='7.55', zto='7.65')
    │               └── AuxSTVarSpecList(outline='specificationList')
    │                   ├── AuxSTVarDec(id='val', outline='var_decl', zfrom='9.16', zto='9.31')
    │                   │   └── AuxSTType(id='tplSetElem', outline='type', type_mod=None, type_pattern=9, zfrom='9.21', zto='9.31')
    │                   ├── AuxSTStatement(outline='statement', type='assert', zfrom='10.17', zto='15.21')
    │                   │   └── AuxSTPredicate(outline='and', zfrom='11.21', zto='15.21')
    │                   │       ├── AuxSTPredicateWithArgs(id='Equals', outline='predicateWithArgs', reference=None, zfrom='13.25', zto='13.61')
    │                   │       │   └── AuxSTArgs(outline='arguments', zfrom='13.31', zto='13.61')
    │                   │       │       ├── AuxSTPredicateWithArgs(id='myOp', outline='predicateWithArgs', reference=None, zfrom='13.32', zto='13.43')
    │                   │       │       │   └── AuxSTArgs(outline='arguments', zfrom='13.37', zto='13.43')
    │                   │       │       │       ├── AuxSTVariable(id='x', outline='var', zfrom='13.37', zto='13.38')
    │                   │       │       │       └── AuxSTVariable(id='val', outline='var', zfrom='13.39', zto='13.42')
    │                   │       │       └── AuxSTPredicateWithArgs(id='myOp', outline='predicateWithArgs', reference=None, zfrom='13.45', zto='13.59')
    │                   │       │           └── AuxSTArgs(outline='arguments', zfrom='13.50', zto='13.59')
    │                   │       │               ├── AuxSTVariable(id='ketVal', outline='var', zfrom='13.50', zto='13.56')
    │                   │       │               └── AuxSTVariable(id='x', outline='var', zfrom='13.57', zto='13.58')
    │                   │       └── AuxSTPredicateWithArgs(id='Equals', outline='predicateWithArgs', reference=None, zfrom='14.25', zto='14.64')
    │                   │           └── AuxSTArgs(outline='arguments', zfrom='14.31', zto='14.64')
    │                   │               ├── AuxSTPredicateWithArgs(id='myOp', outline='predicateWithArgs', reference=None, zfrom='14.32', zto='14.43')
    │                   │               │   └── AuxSTArgs(outline='arguments', zfrom='14.37', zto='14.43')
    │                   │               │       ├── AuxSTVariable(id='val', outline='var', zfrom='14.37', zto='14.40')
    │                   │               │       └── AuxSTVariable(id='x', outline='var', zfrom='14.41', zto='14.42')
    │                   │               └── AuxSTSelf(id='self', number_ats=0, outline='self', reference=None, zfrom='14.46', zto='14.49')
    │                   │                   └── AuxSTQualified(outline='qualified', zfrom='14.50', zto='14.50')
    │                   │                       └── AuxSTPredicateWithArgs(id='NeutralElem', outline='predicateWithArgs', reference=None, zfrom='14.51', zto='14.63')
    │                   │                           └── AuxSTArgs(outline='arguments', zfrom='14.62', zto='14.63')
    │                   └── AuxSTStatement(outline='statement', type='return', zfrom='16.17', zto='16.23')
    │                       └── AuxSTVariable(id='val', outline='var', zfrom='16.20', zto='16.23')
    ├── AuxSTOutline(outline='theorems')
    ├── AuxSTOutline(outline='lemmas')
    ├── AuxSTOutline(outline='propositions')
    ├── AuxSTOutline(outline='conjectures')
    ├── AuxSTOutline(outline='corollaries')
    ├── AuxSTOutline(outline='proofs')
    └── AuxSTLocalizations(outline='localizations')