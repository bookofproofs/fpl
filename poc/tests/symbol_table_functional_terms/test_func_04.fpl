TestNamespace
{
    theory
    {
        func BinOp(x,y: tplSetElem) -> tplSetElem
        {

            mandatory tplSetElem LeftNeutralElement()
            {
                assert IsLeftNeutralElement(self)
            }

            optional tplSetElem RightNeutralElement()
            {
                assert IsRightNeutralElement(self)
            }

            optional tplSetElem NeutralElement()
            {
                assert IsNeutralElement(self)
            }

        }
    }
}

##############################
AnyNode(outline='root')
├── AnyNode(outline='globals')
│   ├── AuxSTGlobal(gid='TestNamespace.BinOp[2:tplSetElem]', id='BinOp[2:tplSetElem]', reference=AuxSTDefinitionFunctionalTerm())
│   ├── AuxSTGlobal(gid='TestNamespace.BinOp[2:tplSetElem].LeftNeutralElement[]', id='BinOp[2:tplSetElem].LeftNeutralElement[]', reference=AuxSTClassInstance())
│   ├── AuxSTGlobal(gid='TestNamespace.BinOp[2:tplSetElem].RightNeutralElement[]', id='BinOp[2:tplSetElem].RightNeutralElement[]', reference=AuxSTClassInstance())
│   └── AuxSTGlobal(gid='TestNamespace.BinOp[2:tplSetElem].NeutralElement[]', id='BinOp[2:tplSetElem].NeutralElement[]', reference=AuxSTClassInstance())
└── AuxSTTheory(checksum='9f29e34f5354fbf7be27c8bf1c7d7602', file_name='test_func_04.fpl', namespace='TestNamespace', outline='theory')
    ├── AuxSTOutline(outline='uses')
    ├── AuxSTOutline(outline='axioms')
    ├── AuxSTOutline(outline='inferenceRules')
    ├── AuxSTOutline(outline='definitions')
    │   └── AuxSTDefinitionFunctionalTerm(def_type='functionalTerm', id='BinOp[2:tplSetElem]', outline='definition', zfrom='5:8:41', zto='23:9:494')
    │       ├── AuxSTSignature(outline='signature', zfrom='5:14:47', zto='5:35:68')
    │       │   ├── AuxSTVarDec(id='x', outline='var_decl', type='tplSetElem', type_mod=None, type_pattern=9, zfrom='5:19:52', zto='5:34:67')
    │       │   └── AuxSTVarDec(id='y', outline='var_decl', type='tplSetElem', type_mod=None, type_pattern=9, zfrom='5:19:52', zto='5:34:67')
    │       ├── AuxSTType(id='tplSetElem', outline='type', type_mod=None, type_pattern=9, zfrom='5:49:82', zto='5:49:82')
    │       ├── AuxSTVarSpecList(outline='specificationList')
    │       └── AuxSTProperties(outline='properties')
    │           ├── AuxSTClassInstance(def_type='property', id='LeftNeutralElement[]', mandatory=True, outline='property', zfrom='8:12:106', zto='11:13:225')
    │           │   ├── AuxSTType(id='tplSetElem', outline='type', type_mod=None, type_pattern=9, zfrom='8:32:126', zto='5:49:82')
    │           │   ├── AuxSTSignature(outline='signature', zfrom='8:34:128', zto='8:53:147')
    │           │   └── AuxSTVarSpecList(outline='specificationList')
    │           │       └── AuxSTStatement(outline='statement', type='assert', zfrom='10:16:178', zto='10:49:211')
    │           │           └── AuxSTPredicateWithArgs(id='IsLeftNeutralElement', outline='predicateWithArgs', reference=None, zfrom='10:23:185', zto='10:49:211')
    │           │               └── AuxSTSelf(id='self', number_ats=0, outline='self', reference=None)
    │           ├── AuxSTClassInstance(def_type='property', id='RightNeutralElement[]', mandatory=False, outline='property', zfrom='13:12:239', zto='16:13:359')
    │           │   ├── AuxSTType(id='tplSetElem', outline='type', type_mod=None, type_pattern=9, zfrom='13:31:258', zto='8:32:126')
    │           │   ├── AuxSTSignature(outline='signature', zfrom='13:33:260', zto='13:53:280')
    │           │   └── AuxSTVarSpecList(outline='specificationList')
    │           │       └── AuxSTStatement(outline='statement', type='assert', zfrom='15:16:311', zto='15:50:345')
    │           │           └── AuxSTPredicateWithArgs(id='IsRightNeutralElement', outline='predicateWithArgs', reference=None, zfrom='15:23:318', zto='15:50:345')
    │           │               └── AuxSTSelf(id='self', number_ats=0, outline='self', reference=None)
    │           └── AuxSTClassInstance(def_type='property', id='NeutralElement[]', mandatory=False, outline='property', zfrom='18:12:373', zto='21:13:483')
    │               ├── AuxSTType(id='tplSetElem', outline='type', type_mod=None, type_pattern=9, zfrom='18:31:392', zto='13:31:258')
    │               ├── AuxSTSignature(outline='signature', zfrom='18:33:394', zto='18:48:409')
    │               └── AuxSTVarSpecList(outline='specificationList')
    │                   └── AuxSTStatement(outline='statement', type='assert', zfrom='20:16:440', zto='20:45:469')
    │                       └── AuxSTPredicateWithArgs(id='IsNeutralElement', outline='predicateWithArgs', reference=None, zfrom='20:23:447', zto='20:45:469')
    │                           └── AuxSTSelf(id='self', number_ats=0, outline='self', reference=None)
    ├── AuxSTOutline(outline='theorems')
    ├── AuxSTOutline(outline='lemmas')
    ├── AuxSTOutline(outline='propositions')
    ├── AuxSTOutline(outline='conjectures')
    ├── AuxSTOutline(outline='corollaries')
    ├── AuxSTOutline(outline='proofs')
    └── AuxSTLocalizations(outline='localizations')