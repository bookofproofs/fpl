TestNamespace
{
    theory
    {
        func BinOp(x,y: tplSetElem) -> tplSetElem
        {

            mandatory tplSetElem LeftNeutralElement()
            {
                assert IsLeftNeutralElement(self)
            }
        }
    }
}

##############################
AnyNode(outline='root')
├── AnyNode(outline='globals')
│   ├── AuxSTGlobal(gid='TestNamespace.BinOp[2:tplSetElem]', id='BinOp[2:tplSetElem]', reference=AuxSTDefinitionFunctionalTerm())
│   └── AuxSTGlobal(gid='TestNamespace.BinOp[2:tplSetElem].LeftNeutralElement[]', id='BinOp[2:tplSetElem].LeftNeutralElement[]', reference=AuxSTClassInstance())
└── AuxSTTheory(checksum='db968749d7119f7627c361425ac5ea8b', file_name='test_func_03.fpl', namespace='TestNamespace', outline='theory')
    ├── AuxSTOutline(outline='uses')
    ├── AuxSTOutline(outline='axioms')
    ├── AuxSTOutline(outline='inferenceRules')
    ├── AuxSTOutline(outline='definitions')
    │   └── AuxSTDefinitionFunctionalTerm(def_type='functionalTerm', id='BinOp[2:tplSetElem]', outline='definition', zfrom='5:9:42', zto='12:9:235')
    │       ├── AuxSTSignature(outline='signature', zfrom='5:14:47', zto='5:35:68')
    │       │   ├── AuxSTVarDec(id='x', outline='var_decl', type='tplSetElem', type_mod=None, type_pattern=9, zfrom='5:20:53', zto='5:34:67')
    │       │   └── AuxSTVarDec(id='y', outline='var_decl', type='tplSetElem', type_mod=None, type_pattern=9, zfrom='5:20:53', zto='5:34:67')
    │       ├── AuxSTType(id='tplSetElem', outline='type', type_mod=None, type_pattern=9, zfrom='5:51:84', zto='5:49:82')
    │       ├── AuxSTVarSpecList(outline='specificationList')
    │       └── AuxSTProperties(outline='properties')
    │           └── AuxSTClassInstance(def_type='classInstance', id='LeftNeutralElement[]', mandatory=True, outline='property', zfrom='8:13:107', zto='11:13:225')
    │               ├── AuxSTType(id='tplSetElem', outline='type', type_mod=None, type_pattern=9, zfrom='8:33:127', zto='5:49:82')
    │               ├── AuxSTSignature(outline='signature', zfrom='8:34:128', zto='8:53:147')
    │               └── AuxSTVarSpecList(outline='specificationList')
    │                   └── AuxSTStatement(outline='statement', type='assert', zfrom='10:17:179', zto='10:49:211')
    │                       └── AuxSTPredicateWithArgs(id='IsLeftNeutralElement', outline='predicateWithArgs', reference=None, zfrom='10:24:186', zto='10:49:211')
    │                           └── AuxSTSelf(id='self', number_ats=0, outline='self', reference=None)
    ├── AuxSTOutline(outline='theorems')
    ├── AuxSTOutline(outline='lemmas')
    ├── AuxSTOutline(outline='propositions')
    ├── AuxSTOutline(outline='conjectures')
    ├── AuxSTOutline(outline='corollaries')
    ├── AuxSTOutline(outline='proofs')
    └── AuxSTLocalizations(outline='localizations')