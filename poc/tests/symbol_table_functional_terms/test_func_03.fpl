TestNamespace
{
    theory
    {
        func BinOp(x,y: tplSetElem) -> tplSetElem
        {

            mandatory tplSetElem LeftNeutralElement()
            {
                assert IsLeftNeutralElement(self)
            }
        }
    }
}
##############################
AnyNode(outline='root')
├── AnyNode(outline='globals')
│   ├── AuxSTGlobal(gid='TestNamespace.BinOp[2:tplSetElem]', id='BinOp[2:tplSetElem]', reference=AuxSTDefinitionFunctionalTerm(), theory=AuxSTTheory())
│   └── AuxSTGlobal(gid='TestNamespace.BinOp[2:tplSetElem].LeftNeutralElement[]', id='BinOp[2:tplSetElem].LeftNeutralElement[]', reference=AuxSTClassInstance(), theory=AuxSTTheory())
└── AuxSTTheory(checksum='db968749d7119f7627c361425ac5ea8b', file_name='test_func_03.fpl', namespace='TestNamespace', outline='theory')
    ├── AuxSTOutline(outline='uses')
    ├── AuxSTOutline(outline='axioms')
    ├── AuxSTOutline(outline='inferenceRules')
    ├── AuxSTOutline(outline='definitions')
    │   └── AuxSTDefinitionFunctionalTerm(def_type='functionalTerm', id='BinOp[2:tplSetElem]', outline='definition', zfrom='5.8', zto='12.9')
    │       ├── AuxSTSignature(outline='signature', zfrom='5.13', zto='5.35')
    │       │   ├── AuxSTVarDec(id='x', outline='var_decl', zfrom='5.19', zto='5.34')
    │       │   │   └── AuxSTType(id='tplSetElem', outline='type', type_mod=None, type_pattern=9, zfrom='5.24', zto='5.34')
    │       │   └── AuxSTVarDec(id='y', outline='var_decl', zfrom='5.21', zto='5.34')
    │       │       └── AuxSTType(id='tplSetElem', outline='type', type_mod=None, type_pattern=9, zfrom='5.24', zto='5.34')
    │       ├── AuxSTType(id='tplSetElem', outline='type', type_mod=None, type_pattern=9, zfrom='5.39', zto='5.49')
    │       ├── AuxSTVarSpecList(outline='specificationList')
    │       └── AuxSTProperties(outline='properties')
    │           └── AuxSTClassInstance(def_type='classInstance', id='LeftNeutralElement[]', mandatory=True, outline='property', zfrom='8.12', zto='11.13')
    │               ├── AuxSTType(id='tplSetElem', outline='type', type_mod=None, type_pattern=9, zfrom='8.22', zto='8.32')
    │               ├── AuxSTSignature(outline='signature', zfrom='8.33', zto='8.53')
    │               └── AuxSTVarSpecList(outline='specificationList')
    │                   └── AuxSTStatementAssert(outline='assert', zfrom='10.16', zto='10.49')
    │                       └── AuxSTPredicateWithArgs(id='IsLeftNeutralElement', outline='predicateWithArgs', reference=None, zfrom='10.23', zto='10.49')
    │                           └── AuxSTArgs(outline='arguments', zfrom='10.44', zto='10.49')
    │                               └── AuxSTSelf(id='self', number_ats=0, outline='self', reference=None, zfrom='10.44', zto='10.48')
    ├── AuxSTOutline(outline='theorems')
    ├── AuxSTOutline(outline='lemmas')
    ├── AuxSTOutline(outline='propositions')
    ├── AuxSTOutline(outline='conjectures')
    ├── AuxSTOutline(outline='corollaries')
    ├── AuxSTOutline(outline='proofs')
    └── AuxSTLocalizations(outline='localizations')