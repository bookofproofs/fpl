Fpl.Algebra.Structures
{
    uses Fpl.Commons

    theory
    {

        func BinOp(x,y: tplSetElem) -> tplSetElem
        {
            optional pred IsAssociative()
            {
                a,b,c: tplSetElem
                all a,b,c
                (
                    Equals
                    (
                        @self(a,@self(b,c)),
                        @self(@self(a,b),c)
                    )
                )
            }
        }
    }
}

##############################
AnyNode(outline='root')
├── AnyNode(outline='globals')
│   ├── AuxSTGlobal(gid='Fpl.Algebra.Structures.BinOp[2:tplSetElem]', id='BinOp[2:tplSetElem]', reference=AuxSTDefinitionFunctionalTerm())
│   └── AuxSTGlobal(gid='Fpl.Algebra.Structures.BinOp[2:tplSetElem].IsAssociative[]', id='BinOp[2:tplSetElem].IsAssociative[]', reference=AuxSTPredicateInstance())
├── AuxSTTheory(namespace='Fpl.Algebra.Structures', outline='theory', theory_name='test_func_09')
│   ├── AuxSTOutline(outline='uses')
│   │   └── AnyNode(id='Fpl.Commons', info=AuxAstInfo(), modifier=None)
│   ├── AuxSTOutline(outline='axioms')
│   ├── AuxSTOutline(outline='inferenceRules')
│   ├── AuxSTOutline(outline='definitions')
│   │   └── AuxSTDefinitionFunctionalTerm(def_type='functionalTerm', id='BinOp[2:tplSetElem]', info=AuxAstInfo(), outline='definition')
│   │       ├── AuxSTSignature(info=AuxAstInfo(), outline='signature')
│   │       │   ├── AuxSTVarDec(id='x', info=AuxAstInfo(), outline='var_dec', type='tplSetElem', type_mod=None, type_pattern=17)
│   │       │   └── AuxSTVarDec(id='y', info=AuxAstInfo(), outline='var_dec', type='tplSetElem', type_mod=None, type_pattern=17)
│   │       ├── AuxSTType(id='tplSetElem', info=AuxAstInfo(), outline='type', type_mod=None, type_pattern=17)
│   │       ├── AuxSTVarSpecList(outline='specificationList')
│   │       └── AuxSTProperties(outline='properties')
│   │           └── AuxSTPredicateInstance(def_type='predicateDeclaration', id='IsAssociative[]', info=AuxAstInfo(), outline='property')
│   │               ├── AuxSTSignature(info=AuxAstInfo(), outline='signature')
│   │               ├── AuxSTVarSpecList(outline='specificationList')
│   │               │   ├── AuxSTVarDec(id='a', info=AuxAstInfo(), outline='var_dec', type='tplSetElem', type_mod=None, type_pattern=17)
│   │               │   ├── AuxSTVarDec(id='b', info=AuxAstInfo(), outline='var_dec', type='tplSetElem', type_mod=None, type_pattern=17)
│   │               │   └── AuxSTVarDec(id='c', info=AuxAstInfo(), outline='var_dec', type='tplSetElem', type_mod=None, type_pattern=17)
│   │               └── AuxSTPredicate(bound_vars=['a', 'b', 'c'], info=AuxAstInfo(), outline='all')
│   │                   └── AuxSTPredicateWithArgs(id='Equals', info=AuxAstInfo(), outline='predicateWithArgs', reference=None)
│   │                       ├── AuxSTPredicateWithArgs(id='self', info=AuxAstInfo(), outline='predicateWithArgs', reference=None)
│   │                       │   ├── AuxSTVariable(id='a', info=AuxAstInfo(), outline='var')
│   │                       │   └── AuxSTPredicateWithArgs(id='self', info=AuxAstInfo(), outline='predicateWithArgs', reference=None)
│   │                       │       ├── AuxSTVariable(id='b', info=AuxAstInfo(), outline='var')
│   │                       │       └── AuxSTVariable(id='c', info=AuxAstInfo(), outline='var')
│   │                       └── AuxSTPredicateWithArgs(id='self', info=AuxAstInfo(), outline='predicateWithArgs', reference=None)
│   │                           ├── AuxSTPredicateWithArgs(id='self', info=AuxAstInfo(), outline='predicateWithArgs', reference=None)
│   │                           │   ├── AuxSTVariable(id='a', info=AuxAstInfo(), outline='var')
│   │                           │   └── AuxSTVariable(id='b', info=AuxAstInfo(), outline='var')
│   │                           └── AuxSTVariable(id='c', info=AuxAstInfo(), outline='var')
│   ├── AuxSTOutline(outline='theorems')
│   ├── AuxSTOutline(outline='lemmas')
│   ├── AuxSTOutline(outline='propositions')
│   ├── AuxSTOutline(outline='conjectures')
│   ├── AuxSTOutline(outline='corollaries')
│   └── AuxSTOutline(outline='proofs')
└── AuxSTLocalizations(outline='localizations')