TestNamespace
{
    theory
    {
        func Succ(n: Nat) -> Nat
        {
        }

        func Addend(a: Nat)->Nat
        {
        }

    }
}

##############################
AnyNode(outline='root')
├── AnyNode(outline='globals')
│   ├── AuxSTGlobal(gid='TestNamespace.Succ[1:Nat]', id='Succ[1:Nat]', reference=AuxSTDefinitionFunctionalTerm())
│   └── AuxSTGlobal(gid='TestNamespace.Addend[1:Nat]', id='Addend[1:Nat]', reference=AuxSTDefinitionFunctionalTerm())
└── AuxSTTheory(checksum='b2111edb94c0149c3ca786477d53f4cc', file_name='test_func_02.fpl', namespace='TestNamespace', outline='theory')
    ├── AuxSTOutline(outline='uses')
    ├── AuxSTOutline(outline='axioms')
    ├── AuxSTOutline(outline='inferenceRules')
    ├── AuxSTOutline(outline='definitions')
    │   ├── AuxSTDefinitionFunctionalTerm(def_type='functionalTerm', id='Succ[1:Nat]', outline='definition', zfrom='5:8:41', zto='7:9:85')
    │   │   ├── AuxSTSignature(outline='signature', zfrom='5:14:47', zto='5:25:58')
    │   │   │   └── AuxSTVarDec(id='n', outline='var_decl', type='Nat', type_mod=None, type_pattern=1, zfrom='5:18:51', zto='5:24:57')
    │   │   ├── AuxSTType(id='Nat', outline='type', type_mod=None, type_pattern=1, zfrom='5:26:59', zto='5:32:65')
    │   │   ├── AuxSTVarSpecList(outline='specificationList')
    │   │   └── AuxSTProperties(outline='properties')
    │   └── AuxSTDefinitionFunctionalTerm(def_type='functionalTerm', id='Addend[1:Nat]', outline='definition', zfrom='9:8:95', zto='11:9:139')
    │       ├── AuxSTSignature(outline='signature', zfrom='9:14:101', zto='9:27:114')
    │       │   └── AuxSTVarDec(id='a', outline='var_decl', type='Nat', type_mod=None, type_pattern=1, zfrom='9:20:107', zto='9:26:113')
    │       ├── AuxSTType(id='Nat', outline='type', type_mod=None, type_pattern=1, zfrom='9:26:113', zto='9:32:119')
    │       ├── AuxSTVarSpecList(outline='specificationList')
    │       └── AuxSTProperties(outline='properties')
    ├── AuxSTOutline(outline='theorems')
    ├── AuxSTOutline(outline='lemmas')
    ├── AuxSTOutline(outline='propositions')
    ├── AuxSTOutline(outline='conjectures')
    ├── AuxSTOutline(outline='corollaries')
    ├── AuxSTOutline(outline='proofs')
    └── AuxSTLocalizations(outline='localizations')