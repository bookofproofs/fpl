import unittest
from parameterized import parameterized
from poc.util.fplutil import Utils
from poc.fplinterpreter import FplInterpreter
from poc.classes.SemAnalyzer import SemAnalyzer
import os

"""
Tests of FPL related (transformer) errors.
Note: FPL parser is autogenerated through the TatSu package. Therefore, we do not test any FPL syntax errors.
"""


class FplVariableAlreadyDeclaredTests(unittest.TestCase):
    path = None
    util = None
    path_to_grammar = None

    @classmethod
    def setUpClass(cls):
        cls.path = os.path.normpath(os.path.abspath(__file__))
        if os.path.isfile(cls.path):
            cls.path = os.path.dirname(cls.path)
        cls.path_to_grammar = os.path.join(cls.path, "../../../grammar")
        cls.path_to_usecases = os.path.join(cls.path)
        cls.util = Utils()
        cls.fpl_parser = cls.util.get_parser(cls.path_to_grammar + "/fpl_tatsu_format.ebnf")

    @parameterized.expand([
        ("test_FplVariableAlreadyDeclared_axiom_01.fpl","SE0080"),
        ("test_FplVariableAlreadyDeclared_axiom_02.fpl","SE0080"),
        ("test_FplVariableAlreadyDeclared_theorem_01.fpl","SE0080"),
        ("test_FplVariableAlreadyDeclared_theorem_02.fpl","SE0080"),
        ("test_FplVariableAlreadyDeclared_ir_01.fpl","SE0080"),
        ("test_FplVariableAlreadyDeclared_ir_02.fpl","SE0080"),
        ("test_FplVariableAlreadyDeclared_predicate_01.fpl","SE0080"),
        ("test_FplVariableAlreadyDeclared_predicate_02.fpl","SE0080"),
        ("test_FplVariableAlreadyDeclared_predicate_03.fpl","SE0080"),
        ("test_FplVariableAlreadyDeclared_predicate_04.fpl","SE0080"),
        ("test_FplVariableAlreadyDeclared_predicate_05.fpl","SE0080"),
        ("test_FplVariableAlreadyDeclared_predicate_06.fpl","SE0080"),
        ("test_FplVariableAlreadyDeclared_predicate_07.fpl","SE0080"),
        ("test_FplVariableAlreadyDeclared_predicate_08.fpl","SE0080"),
        ("test_FplVariableAlreadyDeclared_functional_term_01.fpl","SE0080"),
        ("test_FplVariableAlreadyDeclared_functional_term_02.fpl","SE0080"),
        ("test_FplVariableAlreadyDeclared_functional_term_03.fpl","SE0080"),
        ("test_FplVariableAlreadyDeclared_functional_term_04.fpl","SE0080"),
        ("test_FplVariableAlreadyDeclared_functional_term_05.fpl","SE0080"),
        ("test_FplVariableAlreadyDeclared_functional_term_06.fpl","SE0080"),
        ("test_FplVariableAlreadyDeclared_functional_term_07.fpl","SE0080"),
        ("test_FplVariableAlreadyDeclared_functional_term_08.fpl","SE0080"),
        ("test_FplVariableAlreadyDeclared_lemma_01.fpl","SE0080"),
        ("test_FplVariableAlreadyDeclared_lemma_02.fpl","SE0080"),
        ("test_FplVariableAlreadyDeclared_proof_01.fpl","SE0080"),
        ("test_FplVariableAlreadyDeclared_proof_02.fpl","SE0080"),
        ("test_FplVariableAlreadyDeclared_proposition_01.fpl","SE0080"),
        ("test_FplVariableAlreadyDeclared_proposition_02.fpl","SE0080"),
        ("test_FplVariableAlreadyDeclared_conjecture_01.fpl","SE0080"),
        ("test_FplVariableAlreadyDeclared_conjecture_02.fpl","SE0080"),
        ("test_FplVariableAlreadyDeclared_corollary_01.fpl","SE0080"),
        ("test_FplVariableAlreadyDeclared_corollary_02.fpl","SE0080"),
        ("test_FplVariableAlreadyDeclared_class_01.fpl","SE0080"),
        ("test_FplVariableAlreadyDeclared_class_02.fpl","SE0080"),
        ("test_FplVariableAlreadyDeclared_class_03.fpl","SE0080"),
        ("test_FplVariableAlreadyDeclared_class_04.fpl","SE0080"),
        ("test_FplVariableAlreadyDeclared_class_05.fpl","SE0080"),
        ("test_FplVariableAlreadyDeclared_class_06.fpl","SE0080"),
        ("test_FplVariableAlreadyDeclared_class_07.fpl","SE0080"),
        ("test_FplVariableAlreadyDeclared_class_08.fpl","SE0080"),
        ("test_FplVariableAlreadyDeclared_class_09.fpl","SE0080"),
        ("test_FplVariableAlreadyDeclared_class_10.fpl","SE0080"),
        ("test_FplVariableAlreadyDeclared_class_11.fpl","SE0080"),
    ])
    def test_errors(self, use_case, diagnose_id):
        path_to_use_cases = os.path.join(self.path_to_usecases, use_case)
        interpreter = FplInterpreter(self.fpl_parser, path_to_use_cases)
        result = Utils.get_code_and_expected(self.path_to_usecases, use_case)
        interpreter.syntax_analysis(path_to_use_cases)
        sem_analyzer = SemAnalyzer(interpreter.get_symbol_table_root(), interpreter.get_errors())
        sem_analyzer.check_semantics()
        # exactly one error was found
        self.assertEqual(1, len(interpreter.get_errors()))
        # the error is the same as in the use case file
        self.assertIn(result[1].strip(), str(interpreter.get_errors()[0]))
        self.assertEqual(diagnose_id, interpreter.get_errors()[0].diagnose_id)

    @parameterized.expand([
        "test_FplVariableAlreadyDeclared_class_ok.fpl",
        "test_FplVariableAlreadyDeclared_predicate_ok.fpl",
        "test_FplVariableAlreadyDeclared_functional_term_ok.fpl",
    ])
    def test_ok(self, use_case):
        path_to_use_cases = os.path.join(self.path_to_usecases, use_case)
        interpreter = FplInterpreter(self.fpl_parser, path_to_use_cases)
        result = Utils.get_code_and_expected(self.path_to_usecases, use_case)
        interpreter.syntax_analysis(path_to_use_cases)
        sem_analyzer = SemAnalyzer(interpreter.get_symbol_table_root(), interpreter.get_errors())
        sem_analyzer.check_semantics()
        # no errors were found
        self.assertEqual(0, len(interpreter.get_errors()))
