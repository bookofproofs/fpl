TestNamespace
{
    theory
    {
        class AlgebraicStructure: obj
        {

            myCarrierSet: tplSet
            myCarrierSet1: Nat
            myOps: Test

            AlgebraicStructure(x: tplSet, ops: +Composition)
            {

                a: obj
                myOps := ops
                myCarrierSet := x

                assert
                    and
                    (
                        is(tplSet,Set),
                        is(tplSetElem,Set)
                    )

                assert
                    all a
                    (
                        impl ( is(a,tplSetElem), In(a,myCarrierSet) )
                    )
            }
        }
    }
}
##############################
AnyNode(outline='root')
├── AnyNode(outline='globals')
│   ├── AuxSTGlobal(gid='TestNamespace.AlgebraicStructure', id='AlgebraicStructure', reference=AuxSTClass(), theory=AuxSTTheory())
│   └── AuxSTGlobal(gid='TestNamespace.AlgebraicStructure[1:tplSet,1:+Composition]', id='AlgebraicStructure[1:tplSet,1:+Composition]', reference=AuxSTConstructor(), theory=AuxSTTheory())
└── AuxSTTheory(checksum='776e8b4afed6e178520dc745d99e9720', file_name='test_class_06.fpl', namespace='TestNamespace', outline='theory')
    ├── AuxSTOutline(outline='uses')
    ├── AuxSTOutline(outline='axioms')
    ├── AuxSTOutline(outline='inferenceRules')
    ├── AuxSTOutline(outline='definitions')
    │   └── AuxSTClass(class_types=[], def_type='class', id='AlgebraicStructure', keyword='class', outline='definition', zfrom='5.8', zto='32.9')
    │       ├── AuxSTVarSpecList(outline='specificationList')
    │       │   ├── AuxSTVarDec(id='myCarrierSet', outline='var_decl', zfrom='8.12', zto='8.32')
    │       │   │   └── AuxSTType(id='tplSet', outline='type', type_mod=None, type_pattern=9, zfrom='8.26', zto='8.32')
    │       │   ├── AuxSTVarDec(id='myCarrierSet1', outline='var_decl', zfrom='9.12', zto='9.30')
    │       │   │   └── AuxSTType(id='Nat', outline='type', type_mod=None, type_pattern=1, zfrom='9.27', zto='9.30')
    │       │   └── AuxSTVarDec(id='myOps', outline='var_decl', zfrom='10.12', zto='10.23')
    │       │       └── AuxSTType(id='Test', outline='type', type_mod=None, type_pattern=1, zfrom='10.19', zto='10.23')
    │       ├── AuxSTConstructors(outline='constructors')
    │       │   └── AuxSTConstructor(id='AlgebraicStructure[1:tplSet,1:+Composition]', outline='constructor', zfrom='12.12', zto='31.13')
    │       │       ├── AuxSTSignature(outline='signature', zfrom='12.12', zto='12.60')
    │       │       │   ├── AuxSTVarDec(id='x', outline='var_decl', zfrom='12.31', zto='12.40')
    │       │       │   │   └── AuxSTType(id='tplSet', outline='type', type_mod=None, type_pattern=9, zfrom='12.34', zto='12.40')
    │       │       │   └── AuxSTVarDec(id='ops', outline='var_decl', zfrom='12.42', zto='12.59')
    │       │       │       └── AuxSTType(id='Composition', outline='type', type_mod='+', type_pattern=1, zfrom='12.48', zto='12.59')
    │       │       └── AuxSTVarSpecList(outline='specificationList')
    │       │           ├── AuxSTVarDec(id='a', outline='var_decl', zfrom='15.16', zto='15.22')
    │       │           │   └── AuxSTType(id='obj', outline='type', type_mod=None, type_pattern=17, zfrom='15.19', zto='15.22')
    │       │           ├── AuxSTStatementAssign(outline=':=', zfrom='16.25', zto='16.28')
    │       │           │   ├── AuxSTVariable(id='myOps', outline='var', reference=None, zfrom='16.16', zto='16.21')
    │       │           │   └── AuxSTVariable(id='ops', outline='var', reference=None, zfrom='16.25', zto='16.28')
    │       │           ├── AuxSTStatementAssign(outline=':=', zfrom='17.32', zto='17.33')
    │       │           │   ├── AuxSTVariable(id='myCarrierSet', outline='var', reference=None, zfrom='17.16', zto='17.28')
    │       │           │   └── AuxSTVariable(id='x', outline='var', reference=None, zfrom='17.32', zto='17.33')
    │       │           ├── AuxSTStatementAssert(outline='assert', zfrom='19.16', zto='24.21')
    │       │           │   └── AuxSTPredicate(outline='and', zfrom='20.20', zto='24.21')
    │       │           │       ├── AuxSTStatementIsOp(outline='is', zfrom='22.24', zto='22.38')
    │       │           │       │   ├── AuxSTVariable(id='tplSet', outline='var', reference=None, zfrom='22.27', zto='22.33')
    │       │           │       │   └── AuxSTType(id='Set', outline='type', type_mod=None, type_pattern=1, zfrom='22.34', zto='22.37')
    │       │           │       └── AuxSTStatementIsOp(outline='is', zfrom='23.24', zto='23.42')
    │       │           │           ├── AuxSTVariable(id='tplSetElem', outline='var', reference=None, zfrom='23.27', zto='23.37')
    │       │           │           └── AuxSTType(id='Set', outline='type', type_mod=None, type_pattern=1, zfrom='23.38', zto='23.41')
    │       │           └── AuxSTStatementAssert(outline='assert', zfrom='26.16', zto='30.21')
    │       │               └── AuxSTPredicate(bound_vars=['a'], outline='all', zfrom='27.20', zto='30.21')
    │       │                   └── AuxSTPredicate(outline='=>', zfrom='29.24', zto='29.69')
    │       │                       ├── AuxSTStatementIsOp(outline='is', zfrom='29.31', zto='29.47')
    │       │                       │   ├── AuxSTVariable(id='a', outline='var', reference=None, zfrom='29.34', zto='29.35')
    │       │                       │   └── AuxSTType(id='tplSetElem', outline='type', type_mod=None, type_pattern=9, zfrom='29.36', zto='29.46')
    │       │                       └── AuxSTIdentifier(id='In', outline='id', reference=None, zfrom='29.49', zto='29.67')
    │       │                           └── AuxSTArgs(outline='arguments', zfrom='29.52', zto='29.67')
    │       │                               ├── AuxSTVariable(id='a', outline='var', reference=None, zfrom='29.52', zto='29.53')
    │       │                               └── AuxSTVariable(id='myCarrierSet', outline='var', reference=None, zfrom='29.54', zto='29.66')
    │       └── AuxSTProperties(outline='properties')
    ├── AuxSTOutline(outline='theorems')
    ├── AuxSTOutline(outline='lemmas')
    ├── AuxSTOutline(outline='propositions')
    ├── AuxSTOutline(outline='conjectures')
    ├── AuxSTOutline(outline='corollaries')
    ├── AuxSTOutline(outline='proofs')
    └── AuxSTLocalizations(outline='localizations')