TestNamespace
{
    theory
    {
        class AlgebraicStructure: obj
        {

            myOps: +Composition(x: *tplSetElem)

            mandatory func NthOp(n: index) -> Composition(y: *tplSetElem)
            {
                return myOps$n
            }
        }
    }
}

##############################
AnyNode(outline='root')
├── AnyNode(outline='globals')
│   ├── AuxSTGlobal(gid='TestNamespace.AlgebraicStructure', id='AlgebraicStructure', reference=AuxSTClass())
│   ├── AuxSTGlobal(gid='TestNamespace.AlgebraicStructure[]', id='AlgebraicStructure[]', reference=AuxSTConstructor())
│   └── AuxSTGlobal(gid='TestNamespace.AlgebraicStructure.NthOp[1:index]', id='AlgebraicStructure.NthOp[1:index]', reference=AuxSTFunctionalTermInstance())
└── AuxSTTheory(checksum='668abbe06c8ea35e1d2d44c2aef21c94', file_name='test_class_08.fpl', namespace='TestNamespace', outline='theory')
    ├── AuxSTOutline(outline='uses')
    ├── AuxSTOutline(outline='axioms')
    ├── AuxSTOutline(outline='inferenceRules')
    ├── AuxSTOutline(outline='definitions')
    │   └── AuxSTClass(class_types=['obj'], def_type='class', id='AlgebraicStructure', keyword='class', outline='definition', zfrom='5:9:42', zto='14:9:273')
    │       ├── AuxSTVarSpecList(outline='specificationList')
    │       │   └── AuxSTVarDec(id='myOps', outline='var_decl', zfrom='8:13:95', zto='8:47:129')
    │       │       └── AuxSTType(id='Composition', outline='type', type_mod='+', type_pattern=1, zfrom='8:21:103', zto='8:31:113')
    │       │           └── AuxSTArgs(outline='arguments', zfrom='8:32:114', zto='8:47:129')
    │       │               └── AuxSTVarDec(id='x', outline='var_decl', zfrom='8:33:115', zto='8:46:128')
    │       │                   └── AuxSTType(id='tplSetElem', outline='type', type_mod='*', type_pattern=9, zfrom='8:47:129', zto='8:46:128')
    │       ├── AuxSTConstructors(outline='constructors')
    │       │   └── AuxSTConstructor(id='AlgebraicStructure[]', outline='defaultConstructor', zfrom='', zto='')
    │       │       ├── AuxSTSignature(outline='signature', zfrom='10:47:178', zto='10:42:173')
    │       │       └── AuxSTVarSpecList(outline='specificationList')
    │       └── AuxSTProperties(outline='properties')
    │           └── AuxSTFunctionalTermInstance(def_type='functionalTermInstance', id='NthOp[1:index]', keyword='func', mandatory=True, outline='property', zfrom='10:13:144', zto='13:13:263')
    │               ├── AuxSTSignature(outline='signature', zfrom='10:28:159', zto='10:42:173')
    │               │   └── AuxSTVarDec(id='n', outline='var_decl', zfrom='10:34:165', zto='10:41:172')
    │               │       └── AuxSTType(id='index', outline='type', type_mod=None, type_pattern=64, zfrom='8:52:134', zto='8:47:129')
    │               ├── AuxSTType(id='Composition', outline='type', type_mod=None, type_pattern=1, zfrom='10:77:208', zto='10:73:204')
    │               │   └── AuxSTArgs(outline='arguments', zfrom='10:58:189', zto='10:73:204')
    │               │       └── AuxSTVarDec(id='y', outline='var_decl', zfrom='10:59:190', zto='10:72:203')
    │               │           └── AuxSTType(id='tplSetElem', outline='type', type_mod='*', type_pattern=9, zfrom='10:73:204', zto='10:41:172')
    │               └── AuxSTVarSpecList(outline='specificationList')
    │                   └── AuxSTStatement(outline='statement', type='return', zfrom='12:17:236', zto='12:30:249')
    │                       └── AuxSTPredicate(id='myOps$n', outline='indexValue', zfrom='12:24:243', zto='12:30:249')
    │                           └── AuxSTPredicate(id='myOps$', outline='variadicVar', zfrom='12:24:243', zto='12:29:248')
    │                               ├── AuxSTVariable(id='myOps', outline='var', zfrom='12:24:243', zto='12:28:247')
    │                               └── AuxSTVariable(id='n', outline='var', zfrom='12:30:249', zto='12:30:249')
    ├── AuxSTOutline(outline='theorems')
    ├── AuxSTOutline(outline='lemmas')
    ├── AuxSTOutline(outline='propositions')
    ├── AuxSTOutline(outline='conjectures')
    ├── AuxSTOutline(outline='corollaries')
    ├── AuxSTOutline(outline='proofs')
    └── AuxSTLocalizations(outline='localizations')