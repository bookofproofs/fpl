TestNamespace
{
    theory
    {
        class AlgebraicStructure: obj
        {

            myCarrierSet: tplSet
            myLength: Nat

            mandatory Set CarrierSet()
            {
                self:=myCarrierSet
            }

            optional Nat Length()
            {
                self:=myLength
            }
        }
    }
}

##############################
AnyNode(outline='root')
├── AnyNode(outline='globals')
│   ├── AuxSTGlobal(gid='TestNamespace.AlgebraicStructure', id='AlgebraicStructure', reference=AuxSTClass())
│   ├── AuxSTGlobal(gid='TestNamespace.AlgebraicStructure[]', id='AlgebraicStructure[]', reference=AuxSTConstructor())
│   ├── AuxSTGlobal(gid='TestNamespace.AlgebraicStructure.CarrierSet[]', id='AlgebraicStructure.CarrierSet[]', reference=AuxSTClassInstance())
│   └── AuxSTGlobal(gid='TestNamespace.AlgebraicStructure.Length[]', id='AlgebraicStructure.Length[]', reference=AuxSTClassInstance())
└── AuxSTTheory(checksum='46980f9d9c770916f37829ef866750cf', file_name='test_class_05.fpl', namespace='TestNamespace', outline='theory')
    ├── AuxSTOutline(outline='uses')
    ├── AuxSTOutline(outline='axioms')
    ├── AuxSTOutline(outline='inferenceRules')
    ├── AuxSTOutline(outline='definitions')
    │   └── AuxSTClass(class_types=['obj'], def_type='class', id='AlgebraicStructure', keyword='class', outline='definition', zfrom='5.9', zto='20.9')
    │       ├── AuxSTVarSpecList(outline='specificationList')
    │       │   ├── AuxSTVarDec(id='myCarrierSet', outline='var_decl', zfrom='8.12', zto='8.32')
    │       │   │   └── AuxSTType(id='tplSet', outline='type', type_mod=None, type_pattern=9, zfrom='8.26', zto='8.32')
    │       │   └── AuxSTVarDec(id='myLength', outline='var_decl', zfrom='9.12', zto='9.25')
    │       │       └── AuxSTType(id='Nat', outline='type', type_mod=None, type_pattern=1, zfrom='9.22', zto='9.25')
    │       ├── AuxSTConstructors(outline='constructors')
    │       │   └── AuxSTConstructor(id='AlgebraicStructure[]', outline='defaultConstructor', zfrom='', zto='')
    │       │       ├── AuxSTSignature(outline='signature', zfrom='16.21', zto='16.33')
    │       │       └── AuxSTVarSpecList(outline='specificationList')
    │       └── AuxSTProperties(outline='properties')
    │           ├── AuxSTClassInstance(def_type='classInstance', id='CarrierSet[]', mandatory=True, outline='property', zfrom='11.13', zto='14.13')
    │           │   ├── AuxSTType(id='Set', outline='type', type_mod=None, type_pattern=1, zfrom='11.22', zto='11.25')
    │           │   ├── AuxSTSignature(outline='signature', zfrom='11.27', zto='11.38')
    │           │   └── AuxSTVarSpecList(outline='specificationList')
    │           │       └── AuxSTStatement(outline='statement', type=':=', zfrom='13.23', zto='13.34')
    │           │           ├── AuxSTSelf(id='self', number_ats=0, outline='self', reference=None, zfrom='13.17', zto='13.20')
    │           │           └── AuxSTVariable(id='myCarrierSet', outline='var', zfrom='13.22', zto='13.34')
    │           └── AuxSTClassInstance(def_type='classInstance', id='Length[]', mandatory=False, outline='property', zfrom='16.13', zto='19.13')
    │               ├── AuxSTType(id='Nat', outline='type', type_mod=None, type_pattern=1, zfrom='16.21', zto='16.24')
    │               ├── AuxSTSignature(outline='signature', zfrom='16.26', zto='16.33')
    │               └── AuxSTVarSpecList(outline='specificationList')
    │                   └── AuxSTStatement(outline='statement', type=':=', zfrom='18.23', zto='18.30')
    │                       ├── AuxSTSelf(id='self', number_ats=0, outline='self', reference=None, zfrom='18.17', zto='18.20')
    │                       └── AuxSTVariable(id='myLength', outline='var', zfrom='18.22', zto='18.30')
    ├── AuxSTOutline(outline='theorems')
    ├── AuxSTOutline(outline='lemmas')
    ├── AuxSTOutline(outline='propositions')
    ├── AuxSTOutline(outline='conjectures')
    ├── AuxSTOutline(outline='corollaries')
    ├── AuxSTOutline(outline='proofs')
    └── AuxSTLocalizations(outline='localizations')
