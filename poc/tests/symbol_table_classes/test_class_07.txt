Fpl.Arithmetics.Natural.Peano
{
    theory
    {
        // definition of a new mathematical object (natural number)
        class Nat: obj
        {
            Nat(x: @extDecimal)
            {
                case
                (
                    Equals(x,0) :
                        self := Zero()
                    Equals(x,1) :
                        self := Succ(Zero())
                    Equals(x,2) :
                        self := Succ(Succ(Zero()))
                    else:
                        // else case addressed using a python delegate
                        self := Succ(py.decrement(x))
                )
            }

            Nat(x: Int)
            {
                case
                (
                    IsGreaterOrEqual(x.RightMember(), x.LeftMember()):
                        self:=Sub(x.RightMember(),x.LeftMember())
                    else:
                        self:=undefined
                )
            }
        }
    }
}

##############################

AnyNode(outline='root')
├── AnyNode(outline='globals')
│   ├── AuxSTGlobal(gid='Fpl.Arithmetics.Natural.Peano.Nat', id='Nat', reference=AuxSTClass())
│   ├── AuxSTGlobal(gid='Fpl.Arithmetics.Natural.Peano.Nat[1:]', id='Nat[1:]', reference=AuxSTConstructor())
│   └── AuxSTGlobal(gid='Fpl.Arithmetics.Natural.Peano.Nat[1:Int]', id='Nat[1:Int]', reference=AuxSTConstructor())
├── AuxSTTheory(namespace='Fpl.Arithmetics.Natural.Peano', outline='theory', theory_name='test_class_07')
│   ├── AuxSTOutline(outline='uses')
│   ├── AuxSTOutline(outline='axioms')
│   ├── AuxSTOutline(outline='inferenceRules')
│   ├── AuxSTOutline(outline='definitions')
│   │   └── AuxSTClass(class_types=['obj'], def_type='class', id='Nat', info=AuxAstInfo(), outline='definition')
│   │       ├── AuxSTVarSpecList(outline='specificationList')
│   │       ├── AuxSTConstructors(outline='constructors')
│   │       │   ├── AuxSTConstructor(id='Nat[1:]', info=AuxAstInfo(), outline='constructor')
│   │       │   │   ├── AuxSTSignature(info=AuxAstInfo(), outline='signature')
│   │       │   │   │   └── AuxSTVarDec(id='x', info=AuxAstInfo(), outline='var_dec', type='', type_mod=None, type_pattern=64)
│   │       │   │   └── AuxSTVarSpecList(outline='specificationList')
│   │       │   │       └── AuxSTStatement(info=AuxAstInfo(), outline='statement', type='cases')
│   │       │   │           ├── AuxSTStatement(info=AuxAstInfo(), outline='statement', type='case')
│   │       │   │           │   ├── AuxSTPredicateWithArgs(id='Equals', info=AuxAstInfo(), outline='predicateWithArgs', reference=None)
│   │       │   │           │   │   ├── AuxSTVariable(id='x', info=AuxAstInfo(), outline='var')
│   │       │   │           │   │   └── AuxSTPredicate(id='0', info=AuxAstInfo(), outline='extDigit')
│   │       │   │           │   └── AuxSTVarSpecList(outline='specificationList')
│   │       │   │           │       └── AuxSTStatement(info=AuxAstInfo(), outline='statement', type=':=')
│   │       │   │           │           ├── AuxSTSelf(id='self', number_ats=0, outline='self', reference=None)
│   │       │   │           │           └── AuxSTPredicateWithArgs(id='Zero', info=AuxAstInfo(), outline='predicateWithArgs', reference=None)
│   │       │   │           ├── AuxSTStatement(info=AuxAstInfo(), outline='statement', type='case')
│   │       │   │           │   ├── AuxSTPredicateWithArgs(id='Equals', info=AuxAstInfo(), outline='predicateWithArgs', reference=None)
│   │       │   │           │   │   ├── AuxSTVariable(id='x', info=AuxAstInfo(), outline='var')
│   │       │   │           │   │   └── AuxSTPredicate(id='1', info=AuxAstInfo(), outline='extDigit')
│   │       │   │           │   └── AuxSTVarSpecList(outline='specificationList')
│   │       │   │           │       └── AuxSTStatement(info=AuxAstInfo(), outline='statement', type=':=')
│   │       │   │           │           ├── AuxSTSelf(id='self', number_ats=0, outline='self', reference=None)
│   │       │   │           │           └── AuxSTPredicateWithArgs(id='Succ', info=AuxAstInfo(), outline='predicateWithArgs', reference=None)
│   │       │   │           │               └── AuxSTPredicateWithArgs(id='Zero', info=AuxAstInfo(), outline='predicateWithArgs', reference=None)
│   │       │   │           ├── AuxSTStatement(info=AuxAstInfo(), outline='statement', type='case')
│   │       │   │           │   ├── AuxSTPredicateWithArgs(id='Equals', info=AuxAstInfo(), outline='predicateWithArgs', reference=None)
│   │       │   │           │   │   ├── AuxSTVariable(id='x', info=AuxAstInfo(), outline='var')
│   │       │   │           │   │   └── AuxSTPredicate(id='2', info=AuxAstInfo(), outline='extDigit')
│   │       │   │           │   └── AuxSTVarSpecList(outline='specificationList')
│   │       │   │           │       └── AuxSTStatement(info=AuxAstInfo(), outline='statement', type=':=')
│   │       │   │           │           ├── AuxSTSelf(id='self', number_ats=0, outline='self', reference=None)
│   │       │   │           │           └── AuxSTPredicateWithArgs(id='Succ', info=AuxAstInfo(), outline='predicateWithArgs', reference=None)
│   │       │   │           │               └── AuxSTPredicateWithArgs(id='Succ', info=AuxAstInfo(), outline='predicateWithArgs', reference=None)
│   │       │   │           │                   └── AuxSTPredicateWithArgs(id='Zero', info=AuxAstInfo(), outline='predicateWithArgs', reference=None)
│   │       │   │           └── AuxSTStatement(info=AuxAstInfo(), outline='statement', type='else')
│   │       │   │               └── AuxSTVarSpecList(outline='specificationList')
│   │       │   │                   └── AuxSTStatement(info=AuxAstInfo(), outline='statement', type=':=')
│   │       │   │                       ├── AuxSTSelf(id='self', number_ats=0, outline='self', reference=None)
│   │       │   │                       └── AuxSTPredicateWithArgs(id='Succ', info=AuxAstInfo(), outline='predicateWithArgs', reference=None)
│   │       │   │                           └── AuxSTStatement(id='', info=AuxAstInfo(), outline='statement', type='py')
│   │       │   │                               └── AuxSTVariable(id='x', info=AuxAstInfo(), outline='var')
│   │       │   └── AuxSTConstructor(id='Nat[1:Int]', info=AuxAstInfo(), outline='constructor')
│   │       │       ├── AuxSTSignature(info=AuxAstInfo(), outline='signature')
│   │       │       │   └── AuxSTVarDec(id='x', info=AuxAstInfo(), outline='var_dec', type='Int', type_mod=None, type_pattern=1)
│   │       │       └── AuxSTVarSpecList(outline='specificationList')
│   │       │           └── AuxSTStatement(info=AuxAstInfo(), outline='statement', type='cases')
│   │       │               ├── AuxSTStatement(info=AuxAstInfo(), outline='statement', type='case')
│   │       │               │   ├── AuxSTPredicateWithArgs(id='IsGreaterOrEqual', info=AuxAstInfo(), outline='predicateWithArgs', reference=None)
│   │       │               │   │   ├── AuxSTPredicateWithArgs(id='x.RightMember', info=AuxAstInfo(), outline='predicateWithArgs', reference=None)
│   │       │               │   │   └── AuxSTPredicateWithArgs(id='x.LeftMember', info=AuxAstInfo(), outline='predicateWithArgs', reference=None)
│   │       │               │   └── AuxSTVarSpecList(outline='specificationList')
│   │       │               │       └── AuxSTStatement(info=AuxAstInfo(), outline='statement', type=':=')
│   │       │               │           ├── AuxSTSelf(id='self', number_ats=0, outline='self', reference=None)
│   │       │               │           └── AuxSTPredicateWithArgs(id='Sub', info=AuxAstInfo(), outline='predicateWithArgs', reference=None)
│   │       │               │               ├── AuxSTPredicateWithArgs(id='x.RightMember', info=AuxAstInfo(), outline='predicateWithArgs', reference=None)
│   │       │               │               └── AuxSTPredicateWithArgs(id='x.LeftMember', info=AuxAstInfo(), outline='predicateWithArgs', reference=None)
│   │       │               └── AuxSTStatement(info=AuxAstInfo(), outline='statement', type='else')
│   │       │                   └── AuxSTVarSpecList(outline='specificationList')
│   │       │                       └── AuxSTStatement(info=AuxAstInfo(), outline='statement', type=':=')
│   │       │                           ├── AuxSTSelf(id='self', number_ats=0, outline='self', reference=None)
│   │       │                           └── AuxSTPredicate(info=AuxAstInfo(), outline='undefined')
│   │       └── AuxSTProperties(outline='properties')
│   ├── AuxSTOutline(outline='theorems')
│   ├── AuxSTOutline(outline='lemmas')
│   ├── AuxSTOutline(outline='propositions')
│   ├── AuxSTOutline(outline='conjectures')
│   ├── AuxSTOutline(outline='corollaries')
│   └── AuxSTOutline(outline='proofs')
└── AuxSTLocalizations(outline='localizations')

