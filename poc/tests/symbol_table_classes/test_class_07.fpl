Fpl.Arithmetics.Natural.Peano
{
    theory
    {
        // definition of a new mathematical object (natural number)
        class Nat: obj
        {
            Nat(x: @extDecimal)
            {
                cases
                (
                    case Equals(x,0) :
                        self := Zero()
                    case Equals(x,1) :
                        self := Succ(Zero())
                    case Equals(x,2) :
                        self := Succ(Succ(Zero()))
                    else:
                        // else case addressed using a python delegate
                        self := Succ(py.decrement(x))
                )
            }

            Nat(x: Int)
            {
                cases
                (
                    case IsGreaterOrEqual(x.RightMember(), x.LeftMember()):
                        self:=Sub(x.RightMember(),x.LeftMember())
                    else:
                        self:=undefined
                )
            }
        }
    }
}

##############################
AnyNode(outline='root')
├── AnyNode(outline='globals')
│   ├── AuxSTGlobal(gid='Fpl.Arithmetics.Natural.Peano.Nat', id='Nat', reference=AuxSTClass(), theory=AuxSTTheory())
│   ├── AuxSTGlobal(gid='Fpl.Arithmetics.Natural.Peano.Nat[1:@extDecimal]', id='Nat[1:@extDecimal]', reference=AuxSTConstructor(), theory=AuxSTTheory())
│   └── AuxSTGlobal(gid='Fpl.Arithmetics.Natural.Peano.Nat[1:Int]', id='Nat[1:Int]', reference=AuxSTConstructor(), theory=AuxSTTheory())
└── AuxSTTheory(checksum='18b3dcf4c7512170930d83e4853b5ad3', file_name='test_class_07.fpl', namespace='Fpl.Arithmetics.Natural.Peano', outline='theory')
    ├── AuxSTOutline(outline='uses')
    ├── AuxSTOutline(outline='axioms')
    ├── AuxSTOutline(outline='inferenceRules')
    ├── AuxSTOutline(outline='definitions')
    │   └── AuxSTClass(class_types=['obj'], def_type='class', id='Nat', keyword='class', outline='definition', zfrom='6.9', zto='34.9')
    │       ├── AuxSTVarSpecList(outline='specificationList')
    │       ├── AuxSTConstructors(outline='constructors')
    │       │   ├── AuxSTConstructor(id='Nat[1:@extDecimal]', outline='constructor', zfrom='8.13', zto='22.13')
    │       │   │   ├── AuxSTSignature(outline='signature', zfrom='8.13', zto='8.31')
    │       │   │   │   └── AuxSTVarDec(id='x', outline='var_decl', zfrom='8.16', zto='8.30')
    │       │   │   │       └── AuxSTType(id='@extDecimal', outline='type', type_mod=None, type_pattern=32, zfrom='8.19', zto='8.30')
    │       │   │   └── AuxSTVarSpecList(outline='specificationList')
    │       │   │       └── AuxSTStatement(outline='statement', type='cases', zfrom='16.21', zto='21.17')
    │       │   │           ├── AuxSTStatement(outline='statement', type='case', zfrom='12.26', zto='14.20')
    │       │   │           │   ├── AuxSTPredicateWithArgs(id='Equals', outline='predicateWithArgs', reference=None, zfrom='12.26', zto='12.36')
    │       │   │           │   │   └── AuxSTArgs(outline='arguments', zfrom='12.32', zto='12.36')
    │       │   │           │   │       ├── AuxSTVariable(id='x', outline='var', zfrom='12.32', zto='12.33')
    │       │   │           │   │       └── AuxSTPredicate(id='0', outline='extDigit', zfrom='12.35', zto='12.35')
    │       │   │           │   └── AuxSTVarSpecList(outline='specificationList')
    │       │   │           │       └── AuxSTStatement(outline='statement', type=':=', zfrom='13.25', zto='13.38')
    │       │   │           │           ├── AuxSTSelf(id='self', number_ats=0, outline='self', reference=None, zfrom='13.25', zto='13.28')
    │       │   │           │           └── AuxSTPredicateWithArgs(id='Zero', outline='predicateWithArgs', reference=None, zfrom='13.33', zto='13.38')
    │       │   │           │               └── AuxSTArgs(outline='arguments', zfrom='13.37', zto='13.38')
    │       │   │           ├── AuxSTStatement(outline='statement', type='case', zfrom='14.26', zto='16.20')
    │       │   │           │   ├── AuxSTPredicateWithArgs(id='Equals', outline='predicateWithArgs', reference=None, zfrom='14.26', zto='14.36')
    │       │   │           │   │   └── AuxSTArgs(outline='arguments', zfrom='14.32', zto='14.36')
    │       │   │           │   │       ├── AuxSTVariable(id='x', outline='var', zfrom='14.32', zto='14.33')
    │       │   │           │   │       └── AuxSTPredicate(id='1', outline='extDigit', zfrom='14.35', zto='14.35')
    │       │   │           │   └── AuxSTVarSpecList(outline='specificationList')
    │       │   │           │       └── AuxSTStatement(outline='statement', type=':=', zfrom='15.25', zto='15.44')
    │       │   │           │           ├── AuxSTSelf(id='self', number_ats=0, outline='self', reference=None, zfrom='15.25', zto='15.28')
    │       │   │           │           └── AuxSTPredicateWithArgs(id='Succ', outline='predicateWithArgs', reference=None, zfrom='15.33', zto='15.44')
    │       │   │           │               └── AuxSTArgs(outline='arguments', zfrom='15.37', zto='15.44')
    │       │   │           │                   └── AuxSTPredicateWithArgs(id='Zero', outline='predicateWithArgs', reference=None, zfrom='15.38', zto='15.43')
    │       │   │           │                       └── AuxSTArgs(outline='arguments', zfrom='15.42', zto='15.43')
    │       │   │           ├── AuxSTStatement(outline='statement', type='case', zfrom='16.26', zto='18.20')
    │       │   │           │   ├── AuxSTPredicateWithArgs(id='Equals', outline='predicateWithArgs', reference=None, zfrom='16.26', zto='16.36')
    │       │   │           │   │   └── AuxSTArgs(outline='arguments', zfrom='16.32', zto='16.36')
    │       │   │           │   │       ├── AuxSTVariable(id='x', outline='var', zfrom='16.32', zto='16.33')
    │       │   │           │   │       └── AuxSTPredicate(id='2', outline='extDigit', zfrom='16.35', zto='16.35')
    │       │   │           │   └── AuxSTVarSpecList(outline='specificationList')
    │       │   │           │       └── AuxSTStatement(outline='statement', type=':=', zfrom='17.25', zto='17.50')
    │       │   │           │           ├── AuxSTSelf(id='self', number_ats=0, outline='self', reference=None, zfrom='17.25', zto='17.28')
    │       │   │           │           └── AuxSTPredicateWithArgs(id='Succ', outline='predicateWithArgs', reference=None, zfrom='17.33', zto='17.50')
    │       │   │           │               └── AuxSTArgs(outline='arguments', zfrom='17.37', zto='17.50')
    │       │   │           │                   └── AuxSTPredicateWithArgs(id='Succ', outline='predicateWithArgs', reference=None, zfrom='17.38', zto='17.49')
    │       │   │           │                       └── AuxSTArgs(outline='arguments', zfrom='17.42', zto='17.49')
    │       │   │           │                           └── AuxSTPredicateWithArgs(id='Zero', outline='predicateWithArgs', reference=None, zfrom='17.43', zto='17.48')
    │       │   │           │                               └── AuxSTArgs(outline='arguments', zfrom='17.47', zto='17.48')
    │       │   │           └── AuxSTStatement(outline='statement', type='else', zfrom='18.21', zto='21.16')
    │       │   │               └── AuxSTVarSpecList(outline='specificationList')
    │       │   │                   └── AuxSTStatement(outline='statement', type=':=', zfrom='20.51', zto='20.53')
    │       │   │                       ├── AuxSTSelf(id='self', number_ats=0, outline='self', reference=None, zfrom='20.25', zto='20.28')
    │       │   │                       └── AuxSTPredicateWithArgs(id='Succ', outline='predicateWithArgs', reference=None, zfrom='20.33', zto='20.53')
    │       │   │                           └── AuxSTArgs(outline='arguments', zfrom='20.37', zto='20.53')
    │       │   │                               └── AuxSTStatement(id='decrement', outline='statement', type='py', zfrom='20.38', zto='20.52')
    │       │   │                                   └── AuxSTVariable(id='x', outline='var', zfrom='20.50', zto='20.51')
    │       │   └── AuxSTConstructor(id='Nat[1:Int]', outline='constructor', zfrom='24.13', zto='33.13')
    │       │       ├── AuxSTSignature(outline='signature', zfrom='24.13', zto='24.23')
    │       │       │   └── AuxSTVarDec(id='x', outline='var_decl', zfrom='24.16', zto='24.22')
    │       │       │       └── AuxSTType(id='Int', outline='type', type_mod=None, type_pattern=1, zfrom='24.19', zto='24.22')
    │       │       └── AuxSTVarSpecList(outline='specificationList')
    │       │           └── AuxSTStatement(outline='statement', type='cases', zfrom='28.21', zto='32.17')
    │       │               ├── AuxSTStatement(outline='statement', type='case', zfrom='28.26', zto='30.20')
    │       │               │   ├── AuxSTPredicateWithArgs(id='IsGreaterOrEqual', outline='predicateWithArgs', reference=None, zfrom='28.26', zto='28.74')
    │       │               │   │   └── AuxSTArgs(outline='arguments', zfrom='28.42', zto='28.74')
    │       │               │   │       ├── AuxSTVariable(id='x', outline='var', zfrom='28.42', zto='28.43')
    │       │               │   │       │   └── AuxSTQualified(outline='qualified', zfrom='28.44', zto='28.44')
    │       │               │   │       │       └── AuxSTPredicateWithArgs(id='RightMember', outline='predicateWithArgs', reference=None, zfrom='28.45', zto='28.57')
    │       │               │   │       │           └── AuxSTArgs(outline='arguments', zfrom='28.56', zto='28.57')
    │       │               │   │       └── AuxSTVariable(id='x', outline='var', zfrom='28.59', zto='28.60')
    │       │               │   │           └── AuxSTQualified(outline='qualified', zfrom='28.61', zto='28.61')
    │       │               │   │               └── AuxSTPredicateWithArgs(id='LeftMember', outline='predicateWithArgs', reference=None, zfrom='28.62', zto='28.73')
    │       │               │   │                   └── AuxSTArgs(outline='arguments', zfrom='28.72', zto='28.73')
    │       │               │   └── AuxSTVarSpecList(outline='specificationList')
    │       │               │       └── AuxSTStatement(outline='statement', type=':=', zfrom='29.51', zto='29.65')
    │       │               │           ├── AuxSTSelf(id='self', number_ats=0, outline='self', reference=None, zfrom='29.25', zto='29.28')
    │       │               │           └── AuxSTPredicateWithArgs(id='Sub', outline='predicateWithArgs', reference=None, zfrom='29.31', zto='29.65')
    │       │               │               └── AuxSTArgs(outline='arguments', zfrom='29.34', zto='29.65')
    │       │               │                   ├── AuxSTVariable(id='x', outline='var', zfrom='29.34', zto='29.35')
    │       │               │                   │   └── AuxSTQualified(outline='qualified', zfrom='29.36', zto='29.36')
    │       │               │                   │       └── AuxSTPredicateWithArgs(id='RightMember', outline='predicateWithArgs', reference=None, zfrom='29.37', zto='29.49')
    │       │               │                   │           └── AuxSTArgs(outline='arguments', zfrom='29.48', zto='29.49')
    │       │               │                   └── AuxSTVariable(id='x', outline='var', zfrom='29.50', zto='29.51')
    │       │               │                       └── AuxSTQualified(outline='qualified', zfrom='29.52', zto='29.52')
    │       │               │                           └── AuxSTPredicateWithArgs(id='LeftMember', outline='predicateWithArgs', reference=None, zfrom='29.53', zto='29.64')
    │       │               │                               └── AuxSTArgs(outline='arguments', zfrom='29.63', zto='29.64')
    │       │               └── AuxSTStatement(outline='statement', type='else', zfrom='30.21', zto='32.16')
    │       │                   └── AuxSTVarSpecList(outline='specificationList')
    │       │                       └── AuxSTStatement(outline='statement', type=':=', zfrom='31.25', zto='31.39')
    │       │                           ├── AuxSTSelf(id='self', number_ats=0, outline='self', reference=None, zfrom='31.25', zto='31.28')
    │       │                           └── AuxSTPredicate(outline='undefined', zfrom='31.31', zto='31.39')
    │       └── AuxSTProperties(outline='properties')
    ├── AuxSTOutline(outline='theorems')
    ├── AuxSTOutline(outline='lemmas')
    ├── AuxSTOutline(outline='propositions')
    ├── AuxSTOutline(outline='conjectures')
    ├── AuxSTOutline(outline='corollaries')
    ├── AuxSTOutline(outline='proofs')
    └── AuxSTLocalizations(outline='localizations')
