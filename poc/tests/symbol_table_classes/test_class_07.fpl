Fpl.Arithmetics.Natural.Peano
{
    theory
    {
        // definition of a new mathematical object (natural number)
        class Nat: obj
        {
            Nat(x: @extDecimal)
            {
                case
                (
                    Equals(x,0) :
                        self := Zero()
                    Equals(x,1) :
                        self := Succ(Zero())
                    Equals(x,2) :
                        self := Succ(Succ(Zero()))
                    else:
                        // else case addressed using a python delegate
                        self := Succ(py.decrement(x))
                )
            }

            Nat(x: Int)
            {
                case
                (
                    IsGreaterOrEqual(x.RightMember(), x.LeftMember()):
                        self:=Sub(x.RightMember(),x.LeftMember())
                    else:
                        self:=undefined
                )
            }
        }
    }
}

##############################
AnyNode(outline='root')
├── AnyNode(outline='globals')
│   ├── AuxSTGlobal(gid='Fpl.Arithmetics.Natural.Peano.Nat', id='Nat', reference=AuxSTClass())
│   ├── AuxSTGlobal(gid='Fpl.Arithmetics.Natural.Peano.Nat[1:@extDecimal]', id='Nat[1:@extDecimal]', reference=AuxSTConstructor())
│   └── AuxSTGlobal(gid='Fpl.Arithmetics.Natural.Peano.Nat[1:Int]', id='Nat[1:Int]', reference=AuxSTConstructor())
└── AuxSTTheory(checksum='5e84b605b5969cf2e782226b29e0bd7e', file_name='test_class_07.fpl', namespace='Fpl.Arithmetics.Natural.Peano', outline='theory')
    ├── AuxSTOutline(outline='uses')
    ├── AuxSTOutline(outline='axioms')
    ├── AuxSTOutline(outline='inferenceRules')
    ├── AuxSTOutline(outline='definitions')
    │   └── AuxSTClass(class_types=['obj'], def_type='class', id='Nat', keyword='class', outline='definition', zfrom='6:8:125', zto='34:9:977')
    │       ├── AuxSTVarSpecList(outline='specificationList')
    │       ├── AuxSTConstructors(outline='constructors')
    │       │   ├── AuxSTConstructor(id='Nat[1:@extDecimal]', outline='constructor', zfrom='', zto='')
    │       │   │   ├── AuxSTSignature(outline='signature', zfrom='8:13:163', zto='8:31:181')
    │       │   │   │   └── AuxSTVarDec(id='x', outline='var_decl', type='@extDecimal', type_mod=None, type_pattern=32, zfrom='8:16:166', zto='8:30:180')
    │       │   │   └── AuxSTVarSpecList(outline='specificationList')
    │       │   │       └── AuxSTStatement(outline='statement', type='cases', zfrom='10:16:212', zto='21:17:640')
    │       │   │           ├── AuxSTStatement(outline='statement', type='case', zfrom='12:20:255', zto='14:20:328')
    │       │   │           │   ├── AuxSTPredicateWithArgs(id='Equals', outline='predicateWithArgs', reference=None, zfrom='12:20:255', zto='12:31:266')
    │       │   │           │   │   ├── AuxSTVariable(id='x', outline='var', zfrom='12:27:262', zto='12:28:263')
    │       │   │           │   │   └── AuxSTPredicate(id='0', outline='extDigit', zfrom='12:29:264', zto='12:30:265')
    │       │   │           │   └── AuxSTVarSpecList(outline='specificationList')
    │       │   │           │       └── AuxSTStatement(outline='statement', type=':=', zfrom='13:24:293', zto='13:38:307')
    │       │   │           │           ├── AuxSTSelf(id='self', number_ats=0, outline='self', reference=None)
    │       │   │           │           └── AuxSTPredicateWithArgs(id='Zero', outline='predicateWithArgs', reference=None, zfrom='13:28:297', zto='13:38:307')
    │       │   │           ├── AuxSTStatement(outline='statement', type='case', zfrom='14:20:328', zto='16:20:407')
    │       │   │           │   ├── AuxSTPredicateWithArgs(id='Equals', outline='predicateWithArgs', reference=None, zfrom='14:20:328', zto='14:31:339')
    │       │   │           │   │   ├── AuxSTVariable(id='x', outline='var', zfrom='14:27:335', zto='14:28:336')
    │       │   │           │   │   └── AuxSTPredicate(id='1', outline='extDigit', zfrom='14:29:337', zto='14:30:338')
    │       │   │           │   └── AuxSTVarSpecList(outline='specificationList')
    │       │   │           │       └── AuxSTStatement(outline='statement', type=':=', zfrom='15:24:366', zto='15:44:386')
    │       │   │           │           ├── AuxSTSelf(id='self', number_ats=0, outline='self', reference=None)
    │       │   │           │           └── AuxSTPredicateWithArgs(id='Succ', outline='predicateWithArgs', reference=None, zfrom='15:32:374', zto='15:44:386')
    │       │   │           │               └── AuxSTPredicateWithArgs(id='Zero', outline='predicateWithArgs', reference=None, zfrom='15:33:375', zto='15:43:385')
    │       │   │           ├── AuxSTStatement(outline='statement', type='case', zfrom='16:20:407', zto='18:20:492')
    │       │   │           │   ├── AuxSTPredicateWithArgs(id='Equals', outline='predicateWithArgs', reference=None, zfrom='16:20:407', zto='16:31:418')
    │       │   │           │   │   ├── AuxSTVariable(id='x', outline='var', zfrom='16:27:414', zto='16:28:415')
    │       │   │           │   │   └── AuxSTPredicate(id='2', outline='extDigit', zfrom='16:29:416', zto='16:30:417')
    │       │   │           │   └── AuxSTVarSpecList(outline='specificationList')
    │       │   │           │       └── AuxSTStatement(outline='statement', type=':=', zfrom='17:24:445', zto='17:50:471')
    │       │   │           │           ├── AuxSTSelf(id='self', number_ats=0, outline='self', reference=None)
    │       │   │           │           └── AuxSTPredicateWithArgs(id='Succ', outline='predicateWithArgs', reference=None, zfrom='17:32:453', zto='17:50:471')
    │       │   │           │               └── AuxSTPredicateWithArgs(id='Succ', outline='predicateWithArgs', reference=None, zfrom='17:37:458', zto='17:49:470')
    │       │   │           │                   └── AuxSTPredicateWithArgs(id='Zero', outline='predicateWithArgs', reference=None, zfrom='17:38:459', zto='17:48:469')
    │       │   │           └── AuxSTStatement(outline='statement', type='else', zfrom='18:20:492', zto='21:16:639')
    │       │   │               └── AuxSTVarSpecList(outline='specificationList')
    │       │   │                   └── AuxSTStatement(outline='statement', type=':=', zfrom='20:50:619', zto='20:53:622')
    │       │   │                       ├── AuxSTSelf(id='self', number_ats=0, outline='self', reference=None)
    │       │   │                       └── AuxSTPredicateWithArgs(id='Succ', outline='predicateWithArgs', reference=None, zfrom='20:32:601', zto='20:53:622')
    │       │   │                           └── AuxSTStatement(id='', outline='statement', type='py', zfrom='20:37:606', zto='20:52:621')
    │       │   │                               └── AuxSTVariable(id='x', outline='var', zfrom='20:50:619', zto='20:51:620')
    │       │   └── AuxSTConstructor(id='Nat[1:Int]', outline='constructor', zfrom='', zto='')
    │       │       ├── AuxSTSignature(outline='signature', zfrom='24:13:669', zto='24:23:679')
    │       │       │   └── AuxSTVarDec(id='x', outline='var_decl', type='Int', type_mod=None, type_pattern=1, zfrom='24:16:672', zto='24:22:678')
    │       │       └── AuxSTVarSpecList(outline='specificationList')
    │       │           └── AuxSTStatement(outline='statement', type='cases', zfrom='26:16:710', zto='32:17:953')
    │       │               ├── AuxSTStatement(outline='statement', type='case', zfrom='28:20:753', zto='30:20:890')
    │       │               │   ├── AuxSTPredicateWithArgs(id='IsGreaterOrEqual', outline='predicateWithArgs', reference=None, zfrom='28:20:753', zto='28:69:802')
    │       │               │   │   ├── AuxSTPredicateWithArgs(id='x.RightMember', outline='predicateWithArgs', reference=None, zfrom='28:28:761', zto='28:52:785')
    │       │               │   │   └── AuxSTPredicateWithArgs(id='x.LeftMember', outline='predicateWithArgs', reference=None, zfrom='28:46:779', zto='28:68:801')
    │       │               │   └── AuxSTVarSpecList(outline='specificationList')
    │       │               │       └── AuxSTStatement(outline='statement', type=':=', zfrom='29:50:854', zto='29:65:869')
    │       │               │           ├── AuxSTSelf(id='self', number_ats=0, outline='self', reference=None)
    │       │               │           └── AuxSTPredicateWithArgs(id='Sub', outline='predicateWithArgs', reference=None, zfrom='29:30:834', zto='29:65:869')
    │       │               │               ├── AuxSTPredicateWithArgs(id='x.RightMember', outline='predicateWithArgs', reference=None, zfrom='29:25:829', zto='29:49:853')
    │       │               │               └── AuxSTPredicateWithArgs(id='x.LeftMember', outline='predicateWithArgs', reference=None, zfrom='29:42:846', zto='29:64:868')
    │       │               └── AuxSTStatement(outline='statement', type='else', zfrom='30:20:890', zto='32:16:952')
    │       │                   └── AuxSTVarSpecList(outline='specificationList')
    │       │                       └── AuxSTStatement(outline='statement', type=':=', zfrom='31:24:920', zto='31:39:935')
    │       │                           ├── AuxSTSelf(id='self', number_ats=0, outline='self', reference=None)
    │       │                           └── AuxSTPredicate(outline='undefined', zfrom='31:30:926', zto='31:39:935')
    │       └── AuxSTProperties(outline='properties')
    ├── AuxSTOutline(outline='theorems')
    ├── AuxSTOutline(outline='lemmas')
    ├── AuxSTOutline(outline='propositions')
    ├── AuxSTOutline(outline='conjectures')
    ├── AuxSTOutline(outline='corollaries')
    ├── AuxSTOutline(outline='proofs')
    └── AuxSTLocalizations(outline='localizations')
