TestNamespace
{
    theory
    {
        class Test: obj
        {
            // this functional term instance is (for test purposes intentionally syntactically) incorrect
            // since the image of the function is missing. It will be interpreted as a class instance
            // with a (wrong) type of a functional Term.
            mand +func TestProperty172() { return n }
        }
    }
}
##############################
AnyNode(outline='root')
├── AnyNode(outline='globals')
│   ├── AuxSTGlobal(gid='TestNamespace.Test', id='Test', reference=AuxSTClass(), theory=AuxSTTheory())
│   ├── AuxSTGlobal(gid='TestNamespace.Test[]', id='Test[]', reference=AuxSTConstructor(), theory=AuxSTTheory())
│   └── AuxSTGlobal(gid='TestNamespace.Test.TestProperty172[]', id='Test.TestProperty172[]', reference=AuxSTClassInstance(), theory=AuxSTTheory())
└── AuxSTTheory(checksum='ceb8479ea17a8482fdd3488c688d5aba', file_name='test_class_16.fpl', namespace='TestNamespace', outline='theory')
    ├── AuxSTOutline(outline='uses')
    ├── AuxSTOutline(outline='axioms')
    ├── AuxSTOutline(outline='inferenceRules')
    ├── AuxSTOutline(outline='definitions')
    │   └── AuxSTClass(class_types=[], def_type='class', id='Test', keyword='class', outline='definition', zfrom='5.8', zto='11.9')
    │       ├── AuxSTVarSpecList(outline='specificationList')
    │       ├── AuxSTConstructors(outline='constructors')
    │       │   └── AuxSTConstructor(id='Test[]', outline='defaultConstructor', zfrom='5.8', zto='11.9')
    │       │       ├── AuxSTSignature(outline='signature', zfrom='10.8', zto='10.40')
    │       │       └── AuxSTVarSpecList(outline='specificationList')
    │       └── AuxSTProperties(outline='properties')
    │           └── AuxSTClassInstance(def_type='classInstance', id='TestProperty172[]', mandatory=True, outline='property', zfrom='10.12', zto='10.53')
    │               ├── AuxSTType(id='func', outline='type', type_mod='+', type_pattern=20, zfrom='10.18', zto='10.22')
    │               ├── AuxSTSignature(outline='signature', zfrom='10.23', zto='10.40')
    │               └── AuxSTVarSpecList(outline='specificationList')
    │                   └── AuxSTStatementReturn(outline='statement', zfrom='10.43', zto='10.51')
    │                       └── AuxSTVariable(id='n', outline='var', zfrom='10.50', zto='10.51')
    ├── AuxSTOutline(outline='theorems')
    ├── AuxSTOutline(outline='lemmas')
    ├── AuxSTOutline(outline='propositions')
    ├── AuxSTOutline(outline='conjectures')
    ├── AuxSTOutline(outline='corollaries')
    ├── AuxSTOutline(outline='proofs')
    └── AuxSTLocalizations(outline='localizations')