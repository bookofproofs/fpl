Fpl.Arithmetics.Natural.Peano
{
    theory
    {
        // definition of a new mathematical object (natural number)
        class Nat: obj
        {
            Nat(x: @extDecimal)
            {
                case
                (
                    Equals(x,0) :
                        self := Zero()
                    Equals(x,1) :
                        self := Succ(Zero())
                    Equals(x,2) :
                        self := Succ(Succ(Zero()))
                    else:
                        // else case addressed using a python delegate
                        self := Succ(py.decrement(x))
                )
            }

            Nat(x: Int)
            {
                case
                (
                    IsGreaterOrEqual(x.RightMember(), x.LeftMember()):
                        self:=x.RightMember()
                    else:
                        self:=undefined
                )
            }
        }
    }
}

##############################

AnyNode(outline='root')
├── AnyNode(outline='global')
│   ├── AnyNode(gid='Fpl.Arithmetics.Natural.Peano.Nat', inherits=AnyNode(), node=AnyNode(), outline='class', type_pattern=0, uid='Nat')
│   ├── AnyNode(gid='Fpl.Arithmetics.Natural.Peano.Nat.Nat[1:@extDecimal[]]', node=AnyNode(), outline='constructor', type_pattern=1, uid='Nat')
│   └── AnyNode(gid='Fpl.Arithmetics.Natural.Peano.Nat.Nat[1:Int[]]', node=AnyNode(), outline='constructor', type_pattern=1, uid='Nat')
└── AnyNode(namespace='Fpl.Arithmetics.Natural.Peano', outline='theory', theory_name='uc_class_with_constructor_two')
    ├── AnyNode(outline='uses')
    ├── AnyNode(outline='inferenceRules')
    ├── AnyNode(outline='classes')
    │   └── AnyNode(id='Nat', info=<AuxAstInfo.AuxAstInfo>, outline='class', type='obj', type_mod=None, type_pattern=17)
    │       ├── AnyNode(outline='variables')
    │       ├── AnyNode(outline='constructors')
    │       │   ├── AnyNode(id='Nat[1:@extDecimal[]]', info=<AuxAstInfo.AuxAstInfo>, outline='constructor')
    │       │   │   └── AnyNode(outline='variables')
    │       │   │       └── AnyNode(id='x', info=<AuxAstInfo.AuxAstInfo>, is_signature=True, outline='var', type='@extDecimal', type_mod=None, type_pattern=64)
    │       │   └── AnyNode(id='Nat[1:Int[]]', info=<AuxAstInfo.AuxAstInfo>, outline='constructor')
    │       │       └── AnyNode(outline='variables')
    │       │           └── AnyNode(id='x', info=<AuxAstInfo.AuxAstInfo>, is_signature=True, outline='var', type='Int', type_mod=None, type_pattern=1)
    │       └── AnyNode(outline='properties')
    ├── AnyNode(outline='predicates')
    ├── AnyNode(outline='functionalTerms')
    ├── AnyNode(outline='axioms')
    ├── AnyNode(outline='theoremLikeStatements')
    └── AnyNode(outline='conjectures')
