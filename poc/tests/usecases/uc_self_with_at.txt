Fpl.Algebra.Structures
{
    uses Fpl.Commons

    theory
    {

        func BinOp(x,y: tplSetElem) -> tplSetElem
        {
            optional pred IsAssociative()
            {
                a,b,c: tplSetElem
                all a,b,c
                (
                    Equals
                    (
                        @self(a,@self(b,c)),
                        @self(@self(a,b),c)
                    )
                )
            }
        }
    }
}

##############################
AnyNode(outline='root')
├── AnyNode(outline='global')
│   └── AnyNode(gid='TestNamespace.Succ[1:Nat[]]', node=AnyNode(), outline='functionalTerm', type_pattern=4, uid='Succ')
└── AnyNode(namespace='TestNamespace', outline='theory', theory_name='uc_functional_term_one')
    ├── AnyNode(outline='uses')
    ├── AnyNode(outline='inferenceRules')
    ├── AnyNode(outline='classes')
    ├── AnyNode(outline='predicates')
    ├── AnyNode(outline='functionalTerms')
    │   └── AnyNode(id='Succ[1:Nat[]]', info=<AuxAstInfo.AuxAstInfo>, outline='functionalTerm')
    │       ├── AnyNode(outline='image')
    │       │   └── AnyNode(id='Nat', info=<AuxAstInfo.AuxAstInfo>, outline='param')
    │       ├── AnyNode(outline='variables')
    │       │   └── AnyNode(id='n', info=<AuxAstInfo.AuxAstInfo>, is_signature=True, outline='var', type='Nat', type_mod=None, type_pattern=1)
    │       └── AnyNode(outline='properties')
    ├── AnyNode(outline='axioms')
    ├── AnyNode(outline='theoremLikeStatements')
    └── AnyNode(outline='conjectures')