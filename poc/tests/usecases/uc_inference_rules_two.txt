TestNamespace
{
    inference
    {
        ModusPonens()
        {
            p,q: pred

            premise:
                and (p, impl (p,q) )
            conclusion:
                q
        }

        ModusTollens()
        {
            p,q: pred

            premise:
                and (not(q), impl(p,q) )
            conclusion:
                not (p)
        }
    }
    theory
    {
    }
}
##############################

AnyNode(outline='root')
├── AnyNode(outline='global')
│   ├── AnyNode(gid='TestNamespace.ModusPonens[]', node=AnyNode(), outline='inferenceRule', type_pattern=2, uid='ModusPonens')
│   └── AnyNode(gid='TestNamespace.ModusTollens[]', node=AnyNode(), outline='inferenceRule', type_pattern=2, uid='ModusTollens')
└── AnyNode(namespace='TestNamespace', outline='theory', theory_name='uc_inference_rules_two')
    ├── AnyNode(outline='uses')
    ├── AnyNode(outline='inferenceRules')
    │   ├── AnyNode(id='ModusPonens[]', info=<AuxAstInfo.AuxAstInfo>, outline='inferenceRule')
    │   │   └── AnyNode(outline='variables')
    │   │       ├── AnyNode(id='p', info=<AuxAstInfo.AuxAstInfo>, is_signature=False, outline='var', type='pred', type_mod=None, type_pattern=18)
    │   │       └── AnyNode(id='q', info=<AuxAstInfo.AuxAstInfo>, is_signature=False, outline='var', type='pred', type_mod=None, type_pattern=18)
    │   └── AnyNode(id='ModusTollens[]', info=<AuxAstInfo.AuxAstInfo>, outline='inferenceRule')
    │       └── AnyNode(outline='variables')
    │           ├── AnyNode(id='p', info=<AuxAstInfo.AuxAstInfo>, is_signature=False, outline='var', type='pred', type_mod=None, type_pattern=18)
    │           └── AnyNode(id='q', info=<AuxAstInfo.AuxAstInfo>, is_signature=False, outline='var', type='pred', type_mod=None, type_pattern=18)
    ├── AnyNode(outline='classes')
    ├── AnyNode(outline='predicates')
    ├── AnyNode(outline='functionalTerms')
    ├── AnyNode(outline='axioms')
    ├── AnyNode(outline='theoremLikeStatements')
    └── AnyNode(outline='conjectures')
