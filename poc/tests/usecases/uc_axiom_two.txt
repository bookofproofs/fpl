TestNamespace
{
    theory
    {
        axiom ZeroIsNat()
        {
            is(Zero,Nat)
        }

        axiom ZeroIsNotSuccessor()
        {
            n: Nat
            all n
            (
                NotEquals(Zero(), Succ(n))
            )
        }

    }
}

##############################

AnyNode(outline='root')
├── AnyNode(outline='global')
│   ├── AnyNode(gid='TestNamespace.ZeroIsNat[]', node=AnyNode(), outline='axiom', type_pattern=2, uid='ZeroIsNat')
│   └── AnyNode(gid='TestNamespace.ZeroIsNotSuccessor[]', node=AnyNode(), outline='axiom', type_pattern=2, uid='ZeroIsNotSuccessor')
└── AnyNode(namespace='TestNamespace', outline='theory', theory_name='uc_axiom_two')
    ├── AnyNode(outline='uses')
    ├── AnyNode(outline='inferenceRules')
    ├── AnyNode(outline='classes')
    ├── AnyNode(outline='predicates')
    ├── AnyNode(outline='functionalTerms')
    ├── AnyNode(outline='axioms')
    │   ├── AnyNode(id='ZeroIsNat[]', info=<AuxAstInfo.AuxAstInfo>, outline='axiom')
    │   │   └── AnyNode(outline='variables')
    │   └── AnyNode(id='ZeroIsNotSuccessor[]', info=<AuxAstInfo.AuxAstInfo>, outline='axiom')
    │       └── AnyNode(outline='variables')
    │           └── AnyNode(id='n', info=<AuxAstInfo.AuxAstInfo>, is_signature=False, outline='var', type='Nat', type_mod=None, type_pattern=1)
    ├── AnyNode(outline='theoremLikeStatements')
    └── AnyNode(outline='conjectures')