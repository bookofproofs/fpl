TestNamespace
{
    theory
    {
        proposition AddIsUnique(op: Add)
        {
            n,m: Nat
            anotherAdd: Add
            pre:
                and
                    (
                        Equals(Add(n,0),n),
                        Equals(anotherAdd(n,0),n),
                        Equals(Add(n,Succ(m)), Succ(Add(n,m))),
                        Equals(anotherAdd(n,Succ(m)), Succ(anotherAdd(n,m)))
                    )
            con:
                all n
                (
                    all m
                    (
                        Equals(Add(n,m), anotherAdd(n,m))
                    )
                )
        }
    }
}

##############################

AnyNode(outline='root')
├── AnyNode(outline='global')
│   └── AnyNode(gid='TestNamespace.AddIsUnique[1:Add[]]', node=AnyNode(), outline='theoremLikeStmt', type_pattern=2, uid='AddIsUnique')
└── AnyNode(namespace='TestNamespace', outline='theory', theory_name='uc_proposition_one')
    ├── AnyNode(outline='uses')
    ├── AnyNode(outline='inferenceRules')
    ├── AnyNode(outline='classes')
    ├── AnyNode(outline='predicates')
    ├── AnyNode(outline='functionalTerms')
    ├── AnyNode(outline='axioms')
    ├── AnyNode(outline='theoremLikeStatements')
    │   └── AnyNode(id='AddIsUnique[1:Add[]]', info=<AuxAstInfo.AuxAstInfo>, outline='theoremLikeStmt', statement_type='proposition')
    │       └── AnyNode(outline='variables')
    │           ├── AnyNode(id='op', info=<AuxAstInfo.AuxAstInfo>, is_signature=True, outline='var', type='Add', type_mod=None, type_pattern=1)
    │           ├── AnyNode(id='n', info=<AuxAstInfo.AuxAstInfo>, is_signature=False, outline='var', type='Nat', type_mod=None, type_pattern=1)
    │           ├── AnyNode(id='m', info=<AuxAstInfo.AuxAstInfo>, is_signature=False, outline='var', type='Nat', type_mod=None, type_pattern=1)
    │           └── AnyNode(id='anotherAdd', info=<AuxAstInfo.AuxAstInfo>, is_signature=False, outline='var', type='Add', type_mod=None, type_pattern=1)
    └── AnyNode(outline='conjectures')