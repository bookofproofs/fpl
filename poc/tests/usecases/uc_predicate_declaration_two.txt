TestNamespace
{
    theory
    {
        pred Equals(x,y: tpl)
        {
            p: pred a,b: tpl

            all a, b
            (
                iif
                (
                    Equals(a,b),
                    all p
                    (
                        iif
                        (
                            p(a),
                            p(b)
                        )
                    )
                )
            )
        }

        pred NotEquals(x,y: tpl)
        {
            not
            (
                Equals(x,y)
            )
        }

    }
}

##############################

AnyNode(outline='root')
├── AnyNode(outline='global')
│   ├── AnyNode(gid='TestNamespace.Equals[2:tpl[]]', node=AnyNode(), outline='predicateDeclaration', type_pattern=2, uid='Equals')
│   └── AnyNode(gid='TestNamespace.NotEquals[2:tpl[]]', node=AnyNode(), outline='predicateDeclaration', type_pattern=2, uid='NotEquals')
└── AnyNode(namespace='TestNamespace', outline='theory', theory_name='uc_predicate_declaration_two')
    ├── AnyNode(outline='uses')
    ├── AnyNode(outline='inferenceRules')
    ├── AnyNode(outline='classes')
    ├── AnyNode(outline='predicates')
    │   ├── AnyNode(id='Equals[2:tpl[]]', info=<AuxAstInfo.AuxAstInfo>, outline='predicateDeclaration')
    │   │   └── AnyNode(outline='variables')
    │   │       ├── AnyNode(id='x', info=<AuxAstInfo.AuxAstInfo>, is_signature=True, outline='var', type='tpl', type_mod=None, type_pattern=33)
    │   │       ├── AnyNode(id='y', info=<AuxAstInfo.AuxAstInfo>, is_signature=True, outline='var', type='tpl', type_mod=None, type_pattern=33)
    │   │       ├── AnyNode(id='p', info=<AuxAstInfo.AuxAstInfo>, is_signature=False, outline='var', type='pred', type_mod=None, type_pattern=18)
    │   │       ├── AnyNode(id='a', info=<AuxAstInfo.AuxAstInfo>, is_signature=False, outline='var', type='tpl', type_mod=None, type_pattern=33)
    │   │       └── AnyNode(id='b', info=<AuxAstInfo.AuxAstInfo>, is_signature=False, outline='var', type='tpl', type_mod=None, type_pattern=33)
    │   └── AnyNode(id='NotEquals[2:tpl[]]', info=<AuxAstInfo.AuxAstInfo>, outline='predicateDeclaration')
    │       └── AnyNode(outline='variables')
    │           ├── AnyNode(id='x', info=<AuxAstInfo.AuxAstInfo>, is_signature=True, outline='var', type='tpl', type_mod=None, type_pattern=33)
    │           └── AnyNode(id='y', info=<AuxAstInfo.AuxAstInfo>, is_signature=True, outline='var', type='tpl', type_mod=None, type_pattern=33)
    ├── AnyNode(outline='functionalTerms')
    ├── AnyNode(outline='axioms')
    ├── AnyNode(outline='theoremLikeStatements')
    └── AnyNode(outline='conjectures')