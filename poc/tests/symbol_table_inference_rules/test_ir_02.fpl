TestNamespace
{
    inference
    {
        ModusPonens()
        {
            p,q: pred

            premise:
                and (p, impl (p,q) )
            conclusion:
                q
        }

        ModusTollens()
        {
            p,q: pred

            premise:
                and (not(q), impl(p,q) )
            conclusion:
                not (p)
        }
    }
    theory
    {
    }
}
##############################
AnyNode(outline='root')
├── AnyNode(outline='globals')
│   ├── AuxSTGlobal(gid='TestNamespace.ModusPonens[]', id='ModusPonens[]', reference=AuxSTRuleOfInference())
│   └── AuxSTGlobal(gid='TestNamespace.ModusTollens[]', id='ModusTollens[]', reference=AuxSTRuleOfInference())
└── AuxSTTheory(checksum='23e9eb2d5f284479c37175580807c3d4', file_name='test_ir_02.fpl', namespace='TestNamespace', outline='theory')
    ├── AuxSTOutline(outline='uses')
    ├── AuxSTOutline(outline='axioms')
    ├── AuxSTOutline(outline='inferenceRules')
    │   ├── AuxSTRuleOfInference(id='ModusPonens[]', outline='inferenceRule', zfrom='5.9', zto='13.9')
    │   │   ├── AuxSTSignature(outline='signature', zfrom='5.9', zto='5.21')
    │   │   ├── AuxSTVarSpecList(outline='specificationList')
    │   │   │   ├── AuxSTVarDec(id='p', outline='var_decl', zfrom='7.12', zto='7.21')
    │   │   │   │   └── AuxSTType(id='pred', outline='type', type_mod=None, type_pattern=18, zfrom='7.17', zto='7.21')
    │   │   │   └── AuxSTVarDec(id='q', outline='var_decl', zfrom='7.12', zto='7.21')
    │   │   │       └── AuxSTType(id='pred', outline='type', type_mod=None, type_pattern=18, zfrom='7.17', zto='7.21')
    │   │   ├── AuxSTPredicate(outline='pre', zfrom='9.13', zto='11.12')
    │   │   │   └── AuxSTPredicate(outline='and', zfrom='10.17', zto='10.36')
    │   │   │       ├── AuxSTVariable(id='p', outline='var', zfrom='10.21', zto='10.22')
    │   │   │       └── AuxSTPredicate(outline='=>', zfrom='10.25', zto='10.34')
    │   │   │           ├── AuxSTVariable(id='p', outline='var', zfrom='10.30', zto='10.31')
    │   │   │           └── AuxSTVariable(id='q', outline='var', zfrom='10.32', zto='10.33')
    │   │   └── AuxSTPredicate(outline='con', zfrom='11.13', zto='12.17')
    │   │       └── AuxSTVariable(id='q', outline='var', zfrom='12.16', zto='12.17')
    │   └── AuxSTRuleOfInference(id='ModusTollens[]', outline='inferenceRule', zfrom='15.9', zto='23.9')
    │       ├── AuxSTSignature(outline='signature', zfrom='15.9', zto='15.22')
    │       ├── AuxSTVarSpecList(outline='specificationList')
    │       │   ├── AuxSTVarDec(id='p', outline='var_decl', zfrom='17.12', zto='17.21')
    │       │   │   └── AuxSTType(id='pred', outline='type', type_mod=None, type_pattern=18, zfrom='17.17', zto='17.21')
    │       │   └── AuxSTVarDec(id='q', outline='var_decl', zfrom='17.12', zto='17.21')
    │       │       └── AuxSTType(id='pred', outline='type', type_mod=None, type_pattern=18, zfrom='17.17', zto='17.21')
    │       ├── AuxSTPredicate(outline='pre', zfrom='19.13', zto='21.12')
    │       │   └── AuxSTPredicate(outline='and', zfrom='20.17', zto='20.40')
    │       │       ├── AuxSTPredicate(outline='not', zfrom='20.22', zto='20.27')
    │       │       │   └── AuxSTVariable(id='q', outline='var', zfrom='20.25', zto='20.26')
    │       │       └── AuxSTPredicate(outline='=>', zfrom='20.30', zto='20.38')
    │       │           ├── AuxSTVariable(id='p', outline='var', zfrom='20.34', zto='20.35')
    │       │           └── AuxSTVariable(id='q', outline='var', zfrom='20.36', zto='20.37')
    │       └── AuxSTPredicate(outline='con', zfrom='21.13', zto='22.23')
    │           └── AuxSTPredicate(outline='not', zfrom='22.17', zto='22.23')
    │               └── AuxSTVariable(id='p', outline='var', zfrom='22.21', zto='22.22')
    ├── AuxSTOutline(outline='definitions')
    ├── AuxSTOutline(outline='theorems')
    ├── AuxSTOutline(outline='lemmas')
    ├── AuxSTOutline(outline='propositions')
    ├── AuxSTOutline(outline='conjectures')
    ├── AuxSTOutline(outline='corollaries')
    ├── AuxSTOutline(outline='proofs')
    └── AuxSTLocalizations(outline='localizations')
