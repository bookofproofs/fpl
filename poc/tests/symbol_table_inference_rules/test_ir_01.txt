TestNamespace
{
    inference
    {
        ModusPonens()
        {
            p,q: pred

            premise:
                and (p, impl (p,q) )
            conclusion:
                q
        }
    }

    theory
    {
    }
}
##############################
AnyNode(outline='root')
├── AnyNode(outline='globals')
│   └── AuxSTGlobal(gid='TestNamespace.ModusPonens[]', id='ModusPonens[]', reference=AuxSTRuleOfInference())
├── AuxSTTheory(namespace='TestNamespace', outline='theory', theory_name='test_ir_01')
│   ├── AuxSTOutline(outline='uses')
│   ├── AuxSTOutline(outline='axioms')
│   ├── AuxSTOutline(outline='inferenceRules')
│   │   └── AuxSTRuleOfInference(id='ModusPonens[]', info=AuxAstInfo(), outline='inferenceRule')
│   │       ├── AuxSTSignature(info=AuxAstInfo(), outline='signature')
│   │       ├── AuxSTVarSpecList(outline='specificationList')
│   │       │   ├── AuxSTVarDec(id='p', info=AuxAstInfo(), outline='var_dec', type='pred', type_mod=None, type_pattern=18)
│   │       │   └── AuxSTVarDec(id='q', info=AuxAstInfo(), outline='var_dec', type='pred', type_mod=None, type_pattern=18)
│   │       ├── AuxSTPredicate(info=AuxAstInfo(), outline='pre')
│   │       │   └── AuxSTPredicate(info=AuxAstInfo(), outline='and')
│   │       │       ├── AuxSTVariable(id='p', info=AuxAstInfo(), outline='var')
│   │       │       └── AuxSTPredicate(info=AuxAstInfo(), outline='=>')
│   │       │           ├── AuxSTVariable(id='p', info=AuxAstInfo(), outline='var')
│   │       │           └── AuxSTVariable(id='q', info=AuxAstInfo(), outline='var')
│   │       └── AuxSTPredicate(info=AuxAstInfo(), outline='con')
│   │           └── AuxSTVariable(id='q', info=AuxAstInfo(), outline='var')
│   ├── AuxSTOutline(outline='definitions')
│   ├── AuxSTOutline(outline='theorems')
│   ├── AuxSTOutline(outline='lemmas')
│   ├── AuxSTOutline(outline='propositions')
│   ├── AuxSTOutline(outline='conjectures')
│   ├── AuxSTOutline(outline='corollaries')
│   └── AuxSTOutline(outline='proofs')
└── AuxSTLocalizations(outline='localizations')
