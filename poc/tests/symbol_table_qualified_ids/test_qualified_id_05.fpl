 TestNamespace
{
    theory
    {
        class CommutativeGroup: Group
        {
            CommutativeGroup(x: tpl, op: BinOp)
            {
                self := Group(x,op)
                assert op.IsCommutative()
            }
        }
    }
}
##############################
AnyNode(outline='root')
├── AnyNode(outline='globals')
│   ├── AuxSTGlobal(gid='TestNamespace.CommutativeGroup', id='CommutativeGroup', reference=AuxSTClass(), theory=AuxSTTheory())
│   └── AuxSTGlobal(gid='TestNamespace.CommutativeGroup[1:tpl,1:BinOp]', id='CommutativeGroup[1:tpl,1:BinOp]', reference=AuxSTConstructor(), theory=AuxSTTheory())
└── AuxSTTheory(checksum='9bc0b0a2a5ce19963f7d22834812ba81', file_name='test_qualified_id_05.fpl', namespace='TestNamespace', outline='theory')
    ├── AuxSTOutline(outline='uses')
    ├── AuxSTOutline(outline='axioms')
    ├── AuxSTOutline(outline='inferenceRules')
    ├── AuxSTOutline(outline='definitions')
    │   └── AuxSTClass(class_types=['Group'], def_type='class', id='CommutativeGroup', keyword='class', outline='definition', zfrom='5.8', zto='12.9')
    │       ├── AuxSTVarSpecList(outline='specificationList')
    │       ├── AuxSTConstructors(outline='constructors')
    │       │   └── AuxSTConstructor(id='CommutativeGroup[1:tpl,1:BinOp]', outline='constructor', zfrom='7.12', zto='11.13')
    │       │       ├── AuxSTSignature(outline='signature', zfrom='7.12', zto='7.47')
    │       │       │   ├── AuxSTVarDec(id='x', outline='var_decl', zfrom='7.29', zto='7.35')
    │       │       │   │   └── AuxSTType(id='tpl', outline='type', type_mod=None, type_pattern=9, zfrom='7.32', zto='7.35')
    │       │       │   └── AuxSTVarDec(id='op', outline='var_decl', zfrom='7.37', zto='7.46')
    │       │       │       └── AuxSTType(id='BinOp', outline='type', type_mod=None, type_pattern=1, zfrom='7.41', zto='7.46')
    │       │       └── AuxSTVarSpecList(outline='specificationList')
    │       │           ├── AuxSTStatementAssign(outline=':=', zfrom='9.32', zto='9.35')
    │       │           │   ├── AuxSTSelf(id='self', number_ats=0, outline='self', reference=None, zfrom='9.16', zto='9.20')
    │       │           │   └── AuxSTPredicateWithArgs(id='Group', outline='predicateWithArgs', reference=None, zfrom='9.24', zto='9.35')
    │       │           │       └── AuxSTArgs(outline='arguments', zfrom='9.30', zto='9.35')
    │       │           │           ├── AuxSTVariable(id='x', outline='var', zfrom='9.30', zto='9.31')
    │       │           │           └── AuxSTVariable(id='op', outline='var', zfrom='9.32', zto='9.34')
    │       │           └── AuxSTStatementAssert(outline='assert', zfrom='10.16', zto='10.41')
    │       │               └── AuxSTVariable(id='op', outline='var', zfrom='10.23', zto='10.25')
    │       │                   └── AuxSTQualified(outline='qualified', zfrom='10.25', zto='10.25')
    │       │                       └── AuxSTPredicateWithArgs(id='IsCommutative', outline='predicateWithArgs', reference=None, zfrom='10.26', zto='10.41')
    │       │                           └── AuxSTArgs(outline='arguments', zfrom='10.40', zto='10.41')
    │       └── AuxSTProperties(outline='properties')
    ├── AuxSTOutline(outline='theorems')
    ├── AuxSTOutline(outline='lemmas')
    ├── AuxSTOutline(outline='propositions')
    ├── AuxSTOutline(outline='conjectures')
    ├── AuxSTOutline(outline='corollaries')
    ├── AuxSTOutline(outline='proofs')
    └── AuxSTLocalizations(outline='localizations')
