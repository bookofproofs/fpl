TestNamespace
{
    theory
    {
        pred Equals(x,y: tpl)
        {
            p: pred a,b: tpl

            all a, b
            (
                iif
                (
                    Equals(a,b),
                    all p
                    (
                        iif
                        (
                            p(a),
                            p(b)
                        )
                    )
                )
            )
        }

        pred NotEquals(x,y: tpl)
        {
            not
            (
                Equals(x,y)
            )
        }

    }
}

##############################
AnyNode(outline='root')
├── AnyNode(outline='globals')
│   ├── AuxSTGlobal(gid='TestNamespace.Equals[2:tpl]', id='Equals[2:tpl]', reference=AuxSTDefinitionPredicate())
│   └── AuxSTGlobal(gid='TestNamespace.NotEquals[2:tpl]', id='NotEquals[2:tpl]', reference=AuxSTDefinitionPredicate())
├── AuxSTTheory(namespace='TestNamespace', outline='theory', theory_name='test_predicate_13')
│   ├── AuxSTOutline(outline='uses')
│   ├── AuxSTOutline(outline='axioms')
│   ├── AuxSTOutline(outline='inferenceRules')
│   ├── AuxSTOutline(outline='definitions')
│   │   ├── AuxSTDefinitionPredicate(def_type='predicateDeclaration', id='Equals[2:tpl]', info=AuxAstInfo(), outline='definition')
│   │   │   ├── AuxSTSignature(info=AuxAstInfo(), outline='signature')
│   │   │   │   ├── AuxSTVarDec(id='x', info=AuxAstInfo(), outline='var_dec', type='tpl', type_mod=None, type_pattern=17)
│   │   │   │   └── AuxSTVarDec(id='y', info=AuxAstInfo(), outline='var_dec', type='tpl', type_mod=None, type_pattern=17)
│   │   │   ├── AuxSTVarSpecList(outline='specificationList')
│   │   │   │   ├── AuxSTVarDec(id='p', info=AuxAstInfo(), outline='var_dec', type='pred', type_mod=None, type_pattern=18)
│   │   │   │   ├── AuxSTVarDec(id='a', info=AuxAstInfo(), outline='var_dec', type='tpl', type_mod=None, type_pattern=17)
│   │   │   │   └── AuxSTVarDec(id='b', info=AuxAstInfo(), outline='var_dec', type='tpl', type_mod=None, type_pattern=17)
│   │   │   ├── AuxSTPredicate(bound_vars=['a', 'b'], info=AuxAstInfo(), outline='all')
│   │   │   │   └── AuxSTPredicate(info=AuxAstInfo(), outline='<=>')
│   │   │   │       ├── AuxSTPredicateWithArgs(id='Equals', info=AuxAstInfo(), outline='predicateWithArgs', reference=None)
│   │   │   │       │   ├── AuxSTVariable(id='a', info=AuxAstInfo(), outline='var')
│   │   │   │       │   └── AuxSTVariable(id='b', info=AuxAstInfo(), outline='var')
│   │   │   │       └── AuxSTPredicate(bound_vars=['p'], info=AuxAstInfo(), outline='all')
│   │   │   │           └── AuxSTPredicate(info=AuxAstInfo(), outline='<=>')
│   │   │   │               ├── AuxSTPredicateWithArgs(id='p', info=AuxAstInfo(), outline='predicateWithArgs', reference=None)
│   │   │   │               │   └── AuxSTVariable(id='a', info=AuxAstInfo(), outline='var')
│   │   │   │               └── AuxSTPredicateWithArgs(id='p', info=AuxAstInfo(), outline='predicateWithArgs', reference=None)
│   │   │   │                   └── AuxSTVariable(id='b', info=AuxAstInfo(), outline='var')
│   │   │   └── AuxSTProperties(outline='properties')
│   │   └── AuxSTDefinitionPredicate(def_type='predicateDeclaration', id='NotEquals[2:tpl]', info=AuxAstInfo(), outline='definition')
│   │       ├── AuxSTSignature(info=AuxAstInfo(), outline='signature')
│   │       │   ├── AuxSTVarDec(id='x', info=AuxAstInfo(), outline='var_dec', type='tpl', type_mod=None, type_pattern=17)
│   │       │   └── AuxSTVarDec(id='y', info=AuxAstInfo(), outline='var_dec', type='tpl', type_mod=None, type_pattern=17)
│   │       ├── AuxSTVarSpecList(outline='specificationList')
│   │       ├── AuxSTPredicate(info=AuxAstInfo(), outline='not')
│   │       │   └── AuxSTPredicateWithArgs(id='Equals', info=AuxAstInfo(), outline='predicateWithArgs', reference=None)
│   │       │       ├── AuxSTVariable(id='x', info=AuxAstInfo(), outline='var')
│   │       │       └── AuxSTVariable(id='y', info=AuxAstInfo(), outline='var')
│   │       └── AuxSTProperties(outline='properties')
│   ├── AuxSTOutline(outline='theorems')
│   ├── AuxSTOutline(outline='lemmas')
│   ├── AuxSTOutline(outline='propositions')
│   ├── AuxSTOutline(outline='conjectures')
│   ├── AuxSTOutline(outline='corollaries')
│   └── AuxSTOutline(outline='proofs')
└── AuxSTLocalizations(outline='localizations')
