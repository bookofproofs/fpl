TestNamespace
{
    theory
    {
        pred Test()
        {
            p,q: pred
            and (p, q)

            mandatory pred PropTest(x,y: Nat)
            {
                Equals(x,y)
            }

            optional func PropTest1(x,y: Nat) -> Nat
            {
                return Add(x,y)
            }

            mandatory Nat PropTest2()
            {
                self := Nat(2)
            }

        }

    }
}
##############################
AuxSTOutline(outline='root')
├── AuxSTOutline(outline='globals')
│   ├── AuxSTGlobal(gid='TestNamespace.Test[]', id='Test[]', reference=AuxSTDefinitionPredicate(), theory=AuxSTTheory())
│   ├── AuxSTGlobal(gid='TestNamespace.Test[].PropTest[2:Nat]', id='Test[].PropTest[2:Nat]', reference=AuxSTPredicateInstance(), theory=AuxSTTheory())
│   ├── AuxSTGlobal(gid='TestNamespace.Test[].PropTest1[2:Nat]', id='Test[].PropTest1[2:Nat]', reference=AuxSTFunctionalTermInstance(), theory=AuxSTTheory())
│   └── AuxSTGlobal(gid='TestNamespace.Test[].PropTest2[]', id='Test[].PropTest2[]', reference=AuxSTClassInstance(), theory=AuxSTTheory())
└── AuxSTTheory(checksum='1c25ee7ae3634aed4a9052566f4d083b', file_name='test_predicate_16.fpl', namespace='TestNamespace', outline='theory')
    ├── AuxSTOutline(outline='uses')
    ├── AuxSTOutline(outline='axioms')
    ├── AuxSTOutline(outline='inferenceRules')
    ├── AuxSTOutline(outline='definitions')
    │   └── AuxSTDefinitionPredicate(def_type='predicateDeclaration', id='Test[]', keyword='pred', outline='definition', zfrom='5.8', zto='25.9')
    │       ├── AuxSTSignature(outline='signature', zfrom='5.13', zto='5.19')
    │       ├── AuxSTVarSpecList(outline='specificationList')
    │       │   ├── AuxSTVarDec(id='p', outline='var_decl', zfrom='7.12', zto='7.21')
    │       │   │   └── AuxSTType(id='pred', outline='type', type_mod=None, type_pattern=18, zfrom='7.17', zto='7.21')
    │       │   └── AuxSTVarDec(id='q', outline='var_decl', zfrom='7.14', zto='7.21')
    │       │       └── AuxSTType(id='pred', outline='type', type_mod=None, type_pattern=18, zfrom='7.17', zto='7.21')
    │       ├── AuxSTPredicate(bound_vars=[], outline='and', zfrom='8.12', zto='8.22')
    │       │   ├── AuxSTVariable(id='p', outline='var', reference=None, zfrom='8.17', zto='8.18')
    │       │   └── AuxSTVariable(id='q', outline='var', reference=None, zfrom='8.20', zto='8.21')
    │       └── AuxSTProperties(outline='properties')
    │           ├── AuxSTPredicateInstance(def_type='predicateInstance', id='PropTest[2:Nat]', keyword='pred', mandatory=True, outline='property', zfrom='10.12', zto='13.13')
    │           │   ├── AuxSTSignature(outline='signature', zfrom='10.27', zto='10.45')
    │           │   │   ├── AuxSTVarDec(id='x', outline='var_decl', zfrom='10.36', zto='10.44')
    │           │   │   │   └── AuxSTType(id='Nat', outline='type', type_mod=None, type_pattern=1, zfrom='10.41', zto='10.44')
    │           │   │   └── AuxSTVarDec(id='y', outline='var_decl', zfrom='10.38', zto='10.44')
    │           │   │       └── AuxSTType(id='Nat', outline='type', type_mod=None, type_pattern=1, zfrom='10.41', zto='10.44')
    │           │   ├── AuxSTVarSpecList(outline='specificationList')
    │           │   └── AuxSTIdentifier(id='Equals', outline='id', reference=None, zfrom='12.16', zto='12.27')
    │           │       └── AuxSTArgs(outline='arguments', zfrom='12.23', zto='12.27')
    │           │           ├── AuxSTVariable(id='x', outline='var', reference=None, zfrom='12.23', zto='12.24')
    │           │           └── AuxSTVariable(id='y', outline='var', reference=None, zfrom='12.25', zto='12.26')
    │           ├── AuxSTFunctionalTermInstance(def_type='functionalTermInstance', id='PropTest1[2:Nat]', keyword='func', mandatory=False, outline='property', zfrom='15.12', zto='18.13')
    │           │   ├── AuxSTSignature(outline='signature', zfrom='15.26', zto='15.45')
    │           │   │   ├── AuxSTVarDec(id='x', outline='var_decl', zfrom='15.36', zto='15.44')
    │           │   │   │   └── AuxSTType(id='Nat', outline='type', type_mod=None, type_pattern=1, zfrom='15.41', zto='15.44')
    │           │   │   └── AuxSTVarDec(id='y', outline='var_decl', zfrom='15.38', zto='15.44')
    │           │   │       └── AuxSTType(id='Nat', outline='type', type_mod=None, type_pattern=1, zfrom='15.41', zto='15.44')
    │           │   ├── AuxSTType(id='Nat', outline='type', type_mod=None, type_pattern=1, zfrom='15.49', zto='15.52')
    │           │   └── AuxSTVarSpecList(outline='specificationList')
    │           │       └── AuxSTStatementReturn(outline='return', zfrom='17.16', zto='17.31')
    │           │           └── AuxSTIdentifier(id='Add', outline='id', reference=None, zfrom='17.23', zto='17.31')
    │           │               └── AuxSTArgs(outline='arguments', zfrom='17.27', zto='17.31')
    │           │                   ├── AuxSTVariable(id='x', outline='var', reference=None, zfrom='17.27', zto='17.28')
    │           │                   └── AuxSTVariable(id='y', outline='var', reference=None, zfrom='17.29', zto='17.30')
    │           └── AuxSTClassInstance(def_type='classInstance', id='PropTest2[]', mandatory=True, outline='property', zfrom='20.12', zto='23.13')
    │               ├── AuxSTType(id='Nat', outline='type', type_mod=None, type_pattern=1, zfrom='20.22', zto='20.25')
    │               ├── AuxSTSignature(outline='signature', zfrom='20.26', zto='20.37')
    │               └── AuxSTVarSpecList(outline='specificationList')
    │                   └── AuxSTStatementAssign(outline=':=', zfrom='22.16', zto='22.30')
    │                       ├── AuxSTSelf(id='self', number_ats=0, outline='self', reference=None, zfrom='22.16', zto='22.20')
    │                       └── AuxSTIdentifier(id='Nat', outline='id', reference=None, zfrom='22.24', zto='22.30')
    │                           └── AuxSTArgs(outline='arguments', zfrom='22.28', zto='22.30')
    │                               └── AuxSTExt(id='2', outline='extDigits', zfrom='22.28', zto='22.29')
    ├── AuxSTOutline(outline='theorems')
    ├── AuxSTOutline(outline='lemmas')
    ├── AuxSTOutline(outline='propositions')
    ├── AuxSTOutline(outline='conjectures')
    ├── AuxSTOutline(outline='corollaries')
    ├── AuxSTOutline(outline='proofs')
    └── AuxSTLocalizations(outline='localizations')