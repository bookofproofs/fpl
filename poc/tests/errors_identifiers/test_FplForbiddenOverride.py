import unittest
from parameterized import parameterized
from poc.util.fplutil import Utils
from poc.fplinterpreter import FplInterpreter
import os
from poc.classes.AuxISourceAnalyser import AuxISourceAnalyser

"""
Note: FPL parser is autogenerated through the TatSu package. Therefore, we do not test any FPL syntax errors.
"""


class FplForbiddenOverrideTests(unittest.TestCase):
    path = None
    util = None
    path_to_grammar = None

    @classmethod
    def setUpClass(cls):
        cls.path = os.path.normpath(os.path.abspath(__file__))
        if os.path.isfile(cls.path):
            cls.path = os.path.dirname(cls.path)
        cls.path_to_grammar = os.path.join(cls.path, "../../../grammar")
        cls.path_to_usecases = os.path.join(cls.path)
        cls.util = Utils()
        cls.fpl_parser = cls.util.get_parser(cls.path_to_grammar + "/fpl_tatsu_format.ebnf")

    @parameterized.expand([
        ("test_FplForbiddenOverride_01.fpl", "SE0180"),
        ("test_FplForbiddenOverride_02.fpl", "SE0180"),
        ("test_FplForbiddenOverride_03.fpl", "SE0180"),
        ("test_FplForbiddenOverride_04.fpl", "SE0180"),
        ("test_FplForbiddenOverride_05.fpl", "SE0180"),
        ("test_FplForbiddenOverride_06.fpl", "SE0180"),
        ("test_FplForbiddenOverride_07.fpl", "SE0180"),
        ("test_FplForbiddenOverride_08.fpl", "SE0180"),
        ("test_FplForbiddenOverride_09.fpl", "SE0180"),
        ("test_FplForbiddenOverride_10.fpl", "SE0180"),
        ("test_FplForbiddenOverride_11.fpl", "SE0180"),
        ("test_FplForbiddenOverride_12.fpl", "SE0180"),
        ("test_FplForbiddenOverride_13.fpl", "SE0180"),
        ("test_FplForbiddenOverride_14.fpl", "SE0180"),
        ("test_FplForbiddenOverride_15.fpl", "SE0180"),
        ("test_FplForbiddenOverride_16.fpl", "SE0180"),
        ("test_FplForbiddenOverride_17.fpl", "SE0180"),
        ("test_FplForbiddenOverride_18.fpl", "SE0180"),
        ("test_FplForbiddenOverride_19.fpl", "SE0180"),
        ("test_FplForbiddenOverride_20.fpl", "SE0180"),
        ("test_FplForbiddenOverride_21.fpl", "SE0180"),
        ("test_FplForbiddenOverride_22.fpl", "SE0180"),
        ("test_FplForbiddenOverride_23.fpl", "SE0180"),
        ("test_FplForbiddenOverride_24.fpl", "SE0180"),
        ("test_FplForbiddenOverride_25.fpl", "SE0180"),
        ("test_FplForbiddenOverride_26.fpl", "SE0180"),
        ("test_FplForbiddenOverride_27.fpl", "SE0180"),
        ("test_FplForbiddenOverride_28.fpl", "SE0180"),
        ("test_FplForbiddenOverride_axiom.fpl", "SE0180"),
        ("test_FplForbiddenOverride_conjecture.fpl", "SE0180"),
        ("test_FplForbiddenOverride_corollary.fpl", "SE0180"),
        ("test_FplForbiddenOverride_lemma.fpl", "SE0180"),
        ("test_FplForbiddenOverride_proposition.fpl", "SE0180"),
        ("test_FplForbiddenOverride_theorem.fpl", "SE0180"),
    ])
    def test_errors(self, use_case, diagnose_id):
        path_to_use_cases = os.path.join(self.path_to_usecases, use_case)
        interpreter = FplInterpreter(self.fpl_parser, path_to_use_cases)
        result = Utils.get_code_and_expected(self.path_to_usecases, use_case)
        interpreter.syntax_analysis(path_to_use_cases)
        interpreter.semantic_analysis()
        if AuxISourceAnalyser.verbose:
            interpreter.get_error_mgr().print_errors()
        # the error is the same as in the use case file
        self.assertTrue(Utils.check_if_error_occurs(result[1], interpreter.get_error_mgr(), diagnose_id))

    @parameterized.expand([
        ("test_FplForbiddenOverride_ok_constructor.fpl", "SE0180"),
        ("test_FplForbiddenOverride_ok_functional_term.fpl", "SE0180"),
        ("test_FplForbiddenOverride_ok_inference_rule.fpl", "SE0180"),
        ("test_FplForbiddenOverride_ok_instance_class.fpl", "SE0180"),
        ("test_FplForbiddenOverride_ok_instance_functional_term.fpl", "SE0180"),
        ("test_FplForbiddenOverride_ok_instance_predicate.fpl", "SE0180"),
        ("test_FplForbiddenOverride_ok_predicate.fpl", "SE0180"),
    ])
    def test_ok(self, use_case, diagnose_id):
        path_to_use_cases = os.path.join(self.path_to_usecases, use_case)
        interpreter = FplInterpreter(self.fpl_parser, path_to_use_cases)
        result = Utils.get_code_and_expected(self.path_to_usecases, use_case)
        interpreter.syntax_analysis(path_to_use_cases)
        interpreter.semantic_analysis()
        if AuxISourceAnalyser.verbose:
            interpreter.get_error_mgr().print_errors()
        # the error is the same as in the use case file
        self.assertTrue(Utils.check_if_error_does_not_occur(interpreter.get_error_mgr(), diagnose_id))