import unittest
from parameterized import parameterized
from poc.classes.AuxBits import AuxBits
from poc.classes.AuxSTType import AuxSTType
from poc.classes.AuxISourceAnalyser import AuxISourceAnalyser

"""
Tests of FPL related (transformer) errors.
Note: FPL parser is autogenerated through the TatSu package. Therefore, we do not test any FPL syntax errors.
"""


class AuxBitsTests(unittest.TestCase):
    @classmethod
    def setUpClass(cls):
        cls.i = AuxISourceAnalyser(None, None, None, None)

    @parameterized.expand([
        [AuxBits.objectBit],
        [AuxBits.inbuiltBit],
        [AuxBits.extensionBit],
        [AuxBits.predicateBit],
        [AuxBits.classBit],
        [AuxBits.indexBit],
        [AuxBits.templateBit],
        [AuxBits.functionalTermBit],
    ])
    def test_possibilities(self, pattern_int):
        t = AuxSTType(self.i)
        t.type_pattern = pattern_int
        if pattern_int == AuxBits.objectBit:
            self.assertTrue(t.is_object())
            self.assertFalse(t.is_inbuilt())
            self.assertFalse(t.is_extension())
            self.assertFalse(t.is_predicate())
            self.assertFalse(t.is_class())
            self.assertFalse(t.is_index())
            self.assertFalse(t.is_generic())
            self.assertFalse(t.is_functional_term())
        elif pattern_int == AuxBits.inbuiltBit:
            self.assertFalse(t.is_object())
            self.assertTrue(t.is_inbuilt())
            self.assertFalse(t.is_extension())
            self.assertFalse(t.is_predicate())
            self.assertFalse(t.is_class())
            self.assertFalse(t.is_index())
            self.assertFalse(t.is_generic())
            self.assertFalse(t.is_functional_term())
        elif pattern_int == AuxBits.extensionBit:
            self.assertFalse(t.is_object())
            self.assertFalse(t.is_inbuilt())
            self.assertTrue(t.is_extension())
            self.assertFalse(t.is_predicate())
            self.assertFalse(t.is_class())
            self.assertFalse(t.is_index())
            self.assertFalse(t.is_generic())
            self.assertFalse(t.is_functional_term())
        elif pattern_int == AuxBits.predicateBit:
            self.assertFalse(t.is_object())
            self.assertFalse(t.is_inbuilt())
            self.assertFalse(t.is_extension())
            self.assertTrue(t.is_predicate())
            self.assertFalse(t.is_class())
            self.assertFalse(t.is_index())
            self.assertFalse(t.is_generic())
            self.assertFalse(t.is_functional_term())
        elif pattern_int == AuxBits.classBit:
            self.assertFalse(t.is_object())
            self.assertFalse(t.is_inbuilt())
            self.assertFalse(t.is_extension())
            self.assertFalse(t.is_predicate())
            self.assertTrue(t.is_class())
            self.assertFalse(t.is_index())
            self.assertFalse(t.is_generic())
            self.assertFalse(t.is_functional_term())
        elif pattern_int == AuxBits.indexBit:
            self.assertFalse(t.is_object())
            self.assertFalse(t.is_inbuilt())
            self.assertFalse(t.is_extension())
            self.assertFalse(t.is_predicate())
            self.assertFalse(t.is_class())
            self.assertTrue(t.is_index())
            self.assertFalse(t.is_generic())
            self.assertFalse(t.is_functional_term())
        elif pattern_int == AuxBits.templateBit:
            self.assertFalse(t.is_object())
            self.assertFalse(t.is_inbuilt())
            self.assertFalse(t.is_extension())
            self.assertFalse(t.is_predicate())
            self.assertFalse(t.is_class())
            self.assertFalse(t.is_index())
            self.assertTrue(t.is_generic())
            self.assertFalse(t.is_functional_term())
        elif pattern_int == AuxBits.functionalTermBit:
            self.assertFalse(t.is_object())
            self.assertFalse(t.is_inbuilt())
            self.assertFalse(t.is_extension())
            self.assertFalse(t.is_predicate())
            self.assertFalse(t.is_class())
            self.assertFalse(t.is_index())
            self.assertFalse(t.is_generic())
            self.assertTrue(t.is_functional_term())

    @parameterized.expand([
        [AuxBits.predicateBit],
        [AuxBits.predicateBit + AuxBits.inbuiltBit],
        [AuxBits.predicateBit + AuxBits.templateBit],
    ])
    def test_predicate(self, pattern_int):
        t = AuxSTType(self.i)
        t.type_pattern = pattern_int
        self.assertTrue(t.is_predicate())
