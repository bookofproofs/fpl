from anytree import AnyNode
import unittest
from parameterized import parameterized
from poc.classes.AuxSTOutline import AuxSTOutline
from poc.classes.AuxBits import AuxBits
from poc.classes.AuxSTType import AuxSTType, AuxST
from poc.classes.AuxInbuiltTypes import InbuiltPredicate, InbuiltFunctionalTerm, InbuiltVariableVariadic, InbuiltIndex
from poc.classes.AuxISourceAnalyser import AuxISourceAnalyser
from poc.fplerror import FplErrorManager

"""
Tests of FPL related (transformer) errors.
Note: FPL parser is autogenerated through the TatSu package. Therefore, we do not test any FPL syntax errors.
"""


class AuxBitsTests(unittest.TestCase):
    i = None

    @classmethod
    def setUpClass(cls):
        cls.i = AuxISourceAnalyser(FplErrorManager(), AuxSTOutline(AnyNode(), ""), "", None)
        cls.node = AuxST("", cls.i)

    @parameterized.expand([
        [AuxBits.classBit],
        [AuxBits.objectBit],
        [AuxBits.predicateBit],
        [AuxBits.functionalTermBit],
        [AuxBits.templateBit],
        [AuxBits.inbuiltBit],
        [AuxBits.extensionBit],
        [AuxBits.variadicBit],
        [AuxBits.hasCoordBit],
        [AuxBits.index],
    ])
    def test_possibilities(self, pattern_int):
        if pattern_int == AuxBits.classBit:
            t = AuxSTType(self.i)
            t.type_pattern = pattern_int
            self.assertTrue(t.is_class())
            self.assertFalse(t.is_object())
            self.assertFalse(t.is_predicate())
            self.assertFalse(t.is_functional_term())
            self.assertFalse(t.is_generic())
            self.assertFalse(t.is_inbuilt())
            self.assertFalse(t.is_extension())
            self.assertFalse(t.is_variadic())
            self.assertFalse(t.has_coord())
            self.assertFalse(t.is_index())
        elif pattern_int == AuxBits.objectBit:
            t = AuxSTType(self.i)
            t.type_pattern = pattern_int
            self.assertFalse(t.is_class())
            self.assertTrue(t.is_object())
            self.assertFalse(t.is_predicate())
            self.assertFalse(t.is_functional_term())
            self.assertFalse(t.is_generic())
            self.assertFalse(t.is_inbuilt())
            self.assertFalse(t.is_extension())
            self.assertFalse(t.is_variadic())
            self.assertFalse(t.has_coord())
            self.assertFalse(t.is_index())
        elif pattern_int == AuxBits.predicateBit:
            t = InbuiltPredicate(self.node)
            self.assertFalse(t.is_class())
            self.assertFalse(t.is_object())
            self.assertTrue(t.is_predicate())
            self.assertFalse(t.is_functional_term())
            self.assertFalse(t.is_generic())
            self.assertTrue(t.is_inbuilt())
            self.assertFalse(t.is_extension())
            self.assertFalse(t.is_variadic())
            self.assertFalse(t.has_coord())
            self.assertFalse(t.is_index())
        elif pattern_int == AuxBits.functionalTermBit:
            t = InbuiltFunctionalTerm(self.node)
            self.assertFalse(t.is_class())
            self.assertFalse(t.is_object())
            self.assertFalse(t.is_predicate())
            self.assertTrue(t.is_functional_term())
            self.assertFalse(t.is_generic())
            self.assertTrue(t.is_inbuilt())
            self.assertFalse(t.is_extension())
            self.assertFalse(t.is_variadic())
            self.assertFalse(t.has_coord())
            self.assertFalse(t.is_index())
        elif pattern_int == AuxBits.templateBit:
            t = AuxSTType(self.i)
            t.type_pattern = pattern_int
            self.assertFalse(t.is_class())
            self.assertFalse(t.is_object())
            self.assertFalse(t.is_predicate())
            self.assertFalse(t.is_functional_term())
            self.assertTrue(t.is_generic())
            self.assertFalse(t.is_inbuilt())
            self.assertFalse(t.is_extension())
            self.assertFalse(t.is_variadic())
            self.assertFalse(t.has_coord())
            self.assertFalse(t.is_index())
        elif pattern_int == AuxBits.inbuiltBit:
            t = AuxSTType(self.i)
            t.type_pattern = pattern_int
            self.assertFalse(t.is_class())
            self.assertFalse(t.is_object())
            self.assertFalse(t.is_predicate())
            self.assertFalse(t.is_functional_term())
            self.assertFalse(t.is_generic())
            self.assertTrue(t.is_inbuilt())
            self.assertFalse(t.is_extension())
            self.assertFalse(t.is_variadic())
            self.assertFalse(t.has_coord())
            self.assertFalse(t.is_index())
        elif pattern_int == AuxBits.extensionBit:
            t = AuxSTType(self.i)
            t.type_pattern = pattern_int
            self.assertFalse(t.is_class())
            self.assertFalse(t.is_object())
            self.assertFalse(t.is_predicate())
            self.assertFalse(t.is_functional_term())
            self.assertFalse(t.is_generic())
            self.assertFalse(t.is_inbuilt())
            self.assertTrue(t.is_extension())
            self.assertFalse(t.is_variadic())
            self.assertFalse(t.has_coord())
            self.assertFalse(t.is_index())
        elif pattern_int == AuxBits.variadicBit:
            t = InbuiltVariableVariadic(self.node)
            self.assertFalse(t.is_class())
            self.assertFalse(t.is_object())
            self.assertFalse(t.is_predicate())
            self.assertFalse(t.is_functional_term())
            self.assertFalse(t.is_generic())
            self.assertFalse(t.is_inbuilt())
            self.assertFalse(t.is_extension())
            self.assertTrue(t.is_variadic())
            self.assertFalse(t.has_coord())
            self.assertFalse(t.is_index())
        elif pattern_int == AuxBits.hasCoordBit:
            t = AuxSTType(self.i)
            t.type_pattern = pattern_int
            self.assertFalse(t.is_class())
            self.assertFalse(t.is_object())
            self.assertFalse(t.is_predicate())
            self.assertFalse(t.is_functional_term())
            self.assertFalse(t.is_generic())
            self.assertFalse(t.is_inbuilt())
            self.assertFalse(t.is_extension())
            self.assertFalse(t.is_variadic())
            self.assertTrue(t.has_coord())
            self.assertFalse(t.is_index())
        elif pattern_int == AuxBits.index:
            t = InbuiltIndex(self.node)
            self.assertFalse(t.is_class())
            self.assertFalse(t.is_object())
            self.assertFalse(t.is_predicate())
            self.assertFalse(t.is_functional_term())
            self.assertFalse(t.is_generic())
            self.assertTrue(t.is_inbuilt())
            self.assertFalse(t.is_extension())
            self.assertFalse(t.is_variadic())
            self.assertFalse(t.has_coord())
            self.assertTrue(t.is_index())

    @parameterized.expand([
        [AuxBits.predicateBit],
        [AuxBits.predicateBit + AuxBits.inbuiltBit],
        [AuxBits.predicateBit + AuxBits.templateBit],
    ])
    def test_predicate(self, pattern_int):
        t = AuxSTType(self.i)
        t.type_pattern = pattern_int
        self.assertTrue(t.is_predicate())
