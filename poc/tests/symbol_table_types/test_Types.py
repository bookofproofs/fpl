import unittest
from parameterized import parameterized
from poc.util.fplutil import Utils
from poc.fplinterpreter import FplInterpreter
import os
import re

"""
Tests of FPL related (interpreter) errors.
Note: FPL parser is autogenerated through the TatSu package. Therefore, we do not test any FPL syntax errors.
"""


class TypeTests(unittest.TestCase):

    @classmethod
    def setUpClass(cls):
        cls.path = os.path.normpath(os.path.abspath(__file__))
        if os.path.isfile(cls.path):
            cls.path = os.path.dirname(cls.path)
        cls.path_to_grammar = os.path.join(cls.path, "../../../grammar")
        cls.path_to_usecases = os.path.join(cls.path)
        cls.util = Utils()
        cls.fpl_parser = cls.util.get_parser(cls.path_to_grammar + "/fpl_tatsu_format.ebnf")

    def get_code_and_expected(self, use_case_name):
        file_content = self.util.get_file_content(self.path_to_usecases + "/" + use_case_name + ".txt")
        return file_content.split('##############################')

    @staticmethod
    def remove_object_references_from_string(test_output: str):
        """
        Removes from the test output all dynamic object memory addresses because they are irrelevant for the test.
        :param test_output: output of the test
        :return: test_result replaced
        """
        # remove "poc.classes." paths
        test_output = test_output.replace("poc.classes.", "")
        # remove dynamic object memory references
        first = re.sub(' object at 0x[0-9A-F]+', '', test_output)
        # remove AnyNode string representations that are the "node" attribute of AnyNode
        second = re.sub(r'(node=AnyNode\()([a-zA-Z0-9_=\', \<\.\>]+)(\)[.]*)', r"\1\3", first)
        return second

    @parameterized.expand([
        ("test_Types_class_capsid"),
        ("test_Types_class_obj"),
        ("test_Types_class_object"),
    ])
    def test_possibilities(self, use_case):
        interpreter = FplInterpreter(self.fpl_parser)
        result = self.get_code_and_expected(use_case)
        interpreter.syntax_analysis(use_case, result[0])
        self.assertEqual(result[1].strip(), TypeTests.remove_object_references_from_string(
            interpreter.symbol_table_to_str().strip()))
